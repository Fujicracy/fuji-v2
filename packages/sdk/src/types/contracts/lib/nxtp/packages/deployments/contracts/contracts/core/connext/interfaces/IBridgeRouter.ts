/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";

import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../../../common";

export interface IBridgeRouterInterface extends utils.Interface {
  functions: {
    "send(address,uint256,uint32,bytes32,bool)": FunctionFragment;
    "sendToHook(address,uint256,uint32,bytes32,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "send" | "sendToHook"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "send",
    values: [string, BigNumberish, BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToHook",
    values: [string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendToHook", data: BytesLike): Result;

  events: {};
}

export interface IBridgeRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    send(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _recipient: BytesLike,
      arg4: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendToHook(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _remoteHook: BytesLike,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  send(
    _token: string,
    _amount: BigNumberish,
    _destination: BigNumberish,
    _recipient: BytesLike,
    arg4: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendToHook(
    _token: string,
    _amount: BigNumberish,
    _destination: BigNumberish,
    _remoteHook: BytesLike,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    send(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _recipient: BytesLike,
      arg4: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sendToHook(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _remoteHook: BytesLike,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    send(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _recipient: BytesLike,
      arg4: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendToHook(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _remoteHook: BytesLike,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    send(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _recipient: BytesLike,
      arg4: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendToHook(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _remoteHook: BytesLike,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface IBridgeRouterMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];
}
