/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  Fragment,
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../../../common";

export type TokenIdStruct = { domain: BigNumberish; id: BytesLike };

export type TokenIdStructOutput = [number, string] & {
  domain: number;
  id: string;
};

export type CallParamsStruct = {
  to: string;
  callData: BytesLike;
  originDomain: BigNumberish;
  destinationDomain: BigNumberish;
  agent: string;
  recovery: string;
  forceSlow: boolean;
  receiveLocal: boolean;
  callback: string;
  callbackFee: BigNumberish;
  relayerFee: BigNumberish;
  destinationMinOut: BigNumberish;
};

export type CallParamsStructOutput = [
  string,
  string,
  number,
  number,
  string,
  string,
  boolean,
  boolean,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  to: string;
  callData: string;
  originDomain: number;
  destinationDomain: number;
  agent: string;
  recovery: string;
  forceSlow: boolean;
  receiveLocal: boolean;
  callback: string;
  callbackFee: BigNumber;
  relayerFee: BigNumber;
  destinationMinOut: BigNumber;
};

export type ExecuteArgsStruct = {
  params: CallParamsStruct;
  local: string;
  routers: string[];
  routerSignatures: BytesLike[];
  sequencer: string;
  sequencerSignature: BytesLike;
  amount: BigNumberish;
  nonce: BigNumberish;
  originSender: string;
};

export type ExecuteArgsStructOutput = [
  CallParamsStructOutput,
  string,
  string[],
  string[],
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  params: CallParamsStructOutput;
  local: string;
  routers: string[];
  routerSignatures: string[];
  sequencer: string;
  sequencerSignature: string;
  amount: BigNumber;
  nonce: BigNumber;
  originSender: string;
};

export type XCallArgsStruct = {
  params: CallParamsStruct;
  transactingAsset: string;
  transactingAmount: BigNumberish;
  originMinOut: BigNumberish;
};

export type XCallArgsStructOutput = [
  CallParamsStructOutput,
  string,
  BigNumber,
  BigNumber
] & {
  params: CallParamsStructOutput;
  transactingAsset: string;
  transactingAmount: BigNumber;
  originMinOut: BigNumber;
};

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: string;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: string;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export declare namespace SwapUtils {
  export type SwapStruct = {
    key: BytesLike;
    initialA: BigNumberish;
    futureA: BigNumberish;
    initialATime: BigNumberish;
    futureATime: BigNumberish;
    swapFee: BigNumberish;
    adminFee: BigNumberish;
    lpToken: string;
    pooledTokens: string[];
    tokenPrecisionMultipliers: BigNumberish[];
    balances: BigNumberish[];
    adminFees: BigNumberish[];
  };

  export type SwapStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber[]
  ] & {
    key: string;
    initialA: BigNumber;
    futureA: BigNumber;
    initialATime: BigNumber;
    futureATime: BigNumber;
    swapFee: BigNumber;
    adminFee: BigNumber;
    lpToken: string;
    pooledTokens: string[];
    tokenPrecisionMultipliers: BigNumber[];
    balances: BigNumber[];
    adminFees: BigNumber[];
  };
}

export interface IConnextHandlerInterface extends utils.Interface {
  functions: {
    "LIQUIDITY_FEE_DENOMINATOR()": FunctionFragment;
    "LIQUIDITY_FEE_NUMERATOR()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "aavePool()": FunctionFragment;
    "aavePortalFee()": FunctionFragment;
    "acceptProposedOwner()": FunctionFragment;
    "acceptProposedRouterOwner(address)": FunctionFragment;
    "addConnextion(uint32,address)": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "addRouterLiquidity(uint256,address)": FunctionFragment;
    "addRouterLiquidityFor(uint256,address,address)": FunctionFragment;
    "addSequencer(address)": FunctionFragment;
    "addStableSwapPool((uint32,bytes32),address)": FunctionFragment;
    "addSwapLiquidity(bytes32,uint256[],uint256,uint256)": FunctionFragment;
    "adoptedToCanonical(address)": FunctionFragment;
    "adoptedToLocalPools(bytes32)": FunctionFragment;
    "adoptedToLocalPools((uint32,bytes32))": FunctionFragment;
    "approveRouterForPortal(address)": FunctionFragment;
    "approvedAssets(bytes32)": FunctionFragment;
    "approvedAssets((uint32,bytes32))": FunctionFragment;
    "approvedRelayers(address)": FunctionFragment;
    "approvedSequencers(address)": FunctionFragment;
    "assetWhitelistRemoved()": FunctionFragment;
    "assetWhitelistTimestamp()": FunctionFragment;
    "bridgeRouter()": FunctionFragment;
    "bumpTransfer(bytes32)": FunctionFragment;
    "calculateRemoveSwapLiquidity(bytes32,uint256)": FunctionFragment;
    "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)": FunctionFragment;
    "calculateSwap(bytes32,uint8,uint8,uint256)": FunctionFragment;
    "calculateSwapTokenAmount(bytes32,uint256[],bool)": FunctionFragment;
    "canonicalToAdopted(bytes32)": FunctionFragment;
    "canonicalToAdopted((uint32,bytes32))": FunctionFragment;
    "claim(address,bytes32[])": FunctionFragment;
    "connextion(uint32)": FunctionFragment;
    "delay()": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "domain()": FunctionFragment;
    "execute(((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,address[],bytes[],address,bytes,uint256,uint256,address))": FunctionFragment;
    "executor()": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "forceReceiveLocal((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),uint256,uint256,bytes32,uint32,address)": FunctionFragment;
    "getAavePortalDebt(bytes32)": FunctionFragment;
    "getAavePortalFeeDebt(bytes32)": FunctionFragment;
    "getProposedRouterOwner(address)": FunctionFragment;
    "getProposedRouterOwnerTimestamp(address)": FunctionFragment;
    "getRouterApproval(address)": FunctionFragment;
    "getRouterApprovalForPortal(address)": FunctionFragment;
    "getRouterOwner(address)": FunctionFragment;
    "getRouterRecipient(address)": FunctionFragment;
    "getSwapA(bytes32)": FunctionFragment;
    "getSwapAPrecise(bytes32)": FunctionFragment;
    "getSwapAdminBalance(bytes32,uint256)": FunctionFragment;
    "getSwapLPToken(bytes32)": FunctionFragment;
    "getSwapStorage(bytes32)": FunctionFragment;
    "getSwapToken(bytes32,uint8)": FunctionFragment;
    "getSwapTokenBalance(bytes32,uint8)": FunctionFragment;
    "getSwapTokenIndex(bytes32,address)": FunctionFragment;
    "getSwapVirtualPrice(bytes32)": FunctionFragment;
    "initializeSwap(bytes32,address[],uint8[],string,string,uint256,uint256,uint256,address)": FunctionFragment;
    "initiateClaim(uint32,address,bytes32[])": FunctionFragment;
    "maxRoutersPerTransfer()": FunctionFragment;
    "nonce()": FunctionFragment;
    "onReceive(uint32,bytes32,uint32,bytes32,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "promiseRouter()": FunctionFragment;
    "proposeAssetWhitelistRemoval()": FunctionFragment;
    "proposeDiamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "proposeNewOwner(address)": FunctionFragment;
    "proposeRouterOwner(address,address)": FunctionFragment;
    "proposeRouterWhitelistRemoval()": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedTimestamp()": FunctionFragment;
    "rampA(bytes32,uint256,uint256)": FunctionFragment;
    "reconciledTransfers(bytes32)": FunctionFragment;
    "relayerFeeRouter()": FunctionFragment;
    "relayerFees(bytes32)": FunctionFragment;
    "removeAssetId((uint32,bytes32),address)": FunctionFragment;
    "removeAssetId(bytes32,address)": FunctionFragment;
    "removeAssetWhitelist()": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "removeRouter(address)": FunctionFragment;
    "removeRouterLiquidity(uint256,address,address)": FunctionFragment;
    "removeRouterLiquidityFor(uint256,address,address,address)": FunctionFragment;
    "removeRouterWhitelist()": FunctionFragment;
    "removeSequencer(address)": FunctionFragment;
    "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)": FunctionFragment;
    "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)": FunctionFragment;
    "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounced()": FunctionFragment;
    "repayAavePortal((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "repayAavePortalFor((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "rescindDiamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "routedTransfers(bytes32)": FunctionFragment;
    "routerBalances(address,address)": FunctionFragment;
    "routerWhitelistRemoved()": FunctionFragment;
    "routerWhitelistTimestamp()": FunctionFragment;
    "setAavePool(address)": FunctionFragment;
    "setAavePortalFee(uint256)": FunctionFragment;
    "setBridgeRouter(address)": FunctionFragment;
    "setExecutor(address)": FunctionFragment;
    "setLiquidityFeeNumerator(uint256)": FunctionFragment;
    "setMaxRoutersPerTransfer(uint256)": FunctionFragment;
    "setPromiseRouter(address)": FunctionFragment;
    "setRelayerFeeRouter(address)": FunctionFragment;
    "setRouterRecipient(address,address)": FunctionFragment;
    "setSponsorVault(address)": FunctionFragment;
    "setSwapAdminFee(bytes32,uint256)": FunctionFragment;
    "setSwapFee(bytes32,uint256)": FunctionFragment;
    "setTokenRegistry(address)": FunctionFragment;
    "setupAsset((uint32,bytes32),address,address)": FunctionFragment;
    "setupRouter(address,address,address)": FunctionFragment;
    "sponsorVault()": FunctionFragment;
    "stopRampA(bytes32)": FunctionFragment;
    "swap(bytes32,uint8,uint8,uint256,uint256,uint256)": FunctionFragment;
    "swapExact(bytes32,uint256,address,address,uint256,uint256)": FunctionFragment;
    "swapExactOut(bytes32,uint256,address,address,uint256,uint256)": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
    "transferRelayer(bytes32)": FunctionFragment;
    "unapproveRouterForPortal(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawSwapAdminFees(bytes32)": FunctionFragment;
    "xcall(((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LIQUIDITY_FEE_DENOMINATOR"
      | "LIQUIDITY_FEE_NUMERATOR"
      | "VERSION"
      | "aavePool"
      | "aavePortalFee"
      | "acceptProposedOwner"
      | "acceptProposedRouterOwner"
      | "addConnextion"
      | "addRelayer"
      | "addRouterLiquidity"
      | "addRouterLiquidityFor"
      | "addSequencer"
      | "addStableSwapPool"
      | "addSwapLiquidity"
      | "adoptedToCanonical"
      | "adoptedToLocalPools(bytes32)"
      | "adoptedToLocalPools((uint32,bytes32))"
      | "approveRouterForPortal"
      | "approvedAssets(bytes32)"
      | "approvedAssets((uint32,bytes32))"
      | "approvedRelayers"
      | "approvedSequencers"
      | "assetWhitelistRemoved"
      | "assetWhitelistTimestamp"
      | "bridgeRouter"
      | "bumpTransfer"
      | "calculateRemoveSwapLiquidity"
      | "calculateRemoveSwapLiquidityOneToken"
      | "calculateSwap"
      | "calculateSwapTokenAmount"
      | "canonicalToAdopted(bytes32)"
      | "canonicalToAdopted((uint32,bytes32))"
      | "claim"
      | "connextion"
      | "delay"
      | "diamondCut"
      | "domain"
      | "execute"
      | "executor"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "forceReceiveLocal"
      | "getAavePortalDebt"
      | "getAavePortalFeeDebt"
      | "getProposedRouterOwner"
      | "getProposedRouterOwnerTimestamp"
      | "getRouterApproval"
      | "getRouterApprovalForPortal"
      | "getRouterOwner"
      | "getRouterRecipient"
      | "getSwapA"
      | "getSwapAPrecise"
      | "getSwapAdminBalance"
      | "getSwapLPToken"
      | "getSwapStorage"
      | "getSwapToken"
      | "getSwapTokenBalance"
      | "getSwapTokenIndex"
      | "getSwapVirtualPrice"
      | "initializeSwap"
      | "initiateClaim"
      | "maxRoutersPerTransfer"
      | "nonce"
      | "onReceive"
      | "owner"
      | "pause"
      | "promiseRouter"
      | "proposeAssetWhitelistRemoval"
      | "proposeDiamondCut"
      | "proposeNewOwner"
      | "proposeRouterOwner"
      | "proposeRouterWhitelistRemoval"
      | "proposed"
      | "proposedTimestamp"
      | "rampA"
      | "reconciledTransfers"
      | "relayerFeeRouter"
      | "relayerFees"
      | "removeAssetId((uint32,bytes32),address)"
      | "removeAssetId(bytes32,address)"
      | "removeAssetWhitelist"
      | "removeRelayer"
      | "removeRouter"
      | "removeRouterLiquidity"
      | "removeRouterLiquidityFor"
      | "removeRouterWhitelist"
      | "removeSequencer"
      | "removeSwapLiquidity"
      | "removeSwapLiquidityImbalance"
      | "removeSwapLiquidityOneToken"
      | "renounceOwnership"
      | "renounced"
      | "repayAavePortal"
      | "repayAavePortalFor"
      | "rescindDiamondCut"
      | "routedTransfers"
      | "routerBalances"
      | "routerWhitelistRemoved"
      | "routerWhitelistTimestamp"
      | "setAavePool"
      | "setAavePortalFee"
      | "setBridgeRouter"
      | "setExecutor"
      | "setLiquidityFeeNumerator"
      | "setMaxRoutersPerTransfer"
      | "setPromiseRouter"
      | "setRelayerFeeRouter"
      | "setRouterRecipient"
      | "setSponsorVault"
      | "setSwapAdminFee"
      | "setSwapFee"
      | "setTokenRegistry"
      | "setupAsset"
      | "setupRouter"
      | "sponsorVault"
      | "stopRampA"
      | "swap"
      | "swapExact"
      | "swapExactOut"
      | "tokenRegistry"
      | "transferRelayer"
      | "unapproveRouterForPortal"
      | "unpause"
      | "withdrawSwapAdminFees"
      | "xcall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aavePortalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addConnextion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "addRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addRouterLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRouterLiquidityFor",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSequencer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStableSwapPool",
    values: [TokenIdStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSwapLiquidity",
    values: [BytesLike, BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adoptedToCanonical",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adoptedToLocalPools(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adoptedToLocalPools((uint32,bytes32))",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRouterForPortal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedAssets(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedAssets((uint32,bytes32))",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRelayers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedSequencers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetWhitelistRemoved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetWhitelistTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bumpTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveSwapLiquidity",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveSwapLiquidityOneToken",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwap",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapTokenAmount",
    values: [BytesLike, BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalToAdopted(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalToAdopted((uint32,bytes32))",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "connextion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamondCut.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ExecuteArgsStruct]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceReceiveLocal",
    values: [
      CallParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAavePortalDebt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAavePortalFeeDebt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedRouterOwnerTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterApproval",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterApprovalForPortal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterRecipient",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getSwapA", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getSwapAPrecise",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapAdminBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapLPToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapStorage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapToken",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapTokenBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapTokenIndex",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapVirtualPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSwap",
    values: [
      BytesLike,
      string[],
      BigNumberish[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateClaim",
    values: [BigNumberish, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoutersPerTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onReceive",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "promiseRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAssetWhitelistRemoval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDiamondCut",
    values: [IDiamondCut.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterWhitelistRemoval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rampA",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reconciledTransfers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId((uint32,bytes32),address)",
    values: [TokenIdStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId(bytes32,address)",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterLiquidity",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterLiquidityFor",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSequencer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapLiquidity",
    values: [BytesLike, BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapLiquidityImbalance",
    values: [BytesLike, BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapLiquidityOneToken",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renounced", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repayAavePortal",
    values: [
      CallParamsStruct,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAavePortalFor",
    values: [
      CallParamsStruct,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rescindDiamondCut",
    values: [IDiamondCut.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routedTransfers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routerBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerWhitelistRemoved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerWhitelistTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAavePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAavePortalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeRouter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setExecutor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFeeNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRoutersPerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPromiseRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerFeeRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSponsorVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAdminFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAsset",
    values: [TokenIdStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupRouter",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopRampA",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExact",
    values: [
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOut",
    values: [
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferRelayer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unapproveRouterForPortal",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawSwapAdminFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xcall",
    values: [XCallArgsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aavePortalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConnextion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRouterLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStableSwapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSwapLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adoptedToCanonical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adoptedToLocalPools(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adoptedToLocalPools((uint32,bytes32))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRouterForPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedAssets(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedAssets((uint32,bytes32))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedSequencers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetWhitelistRemoved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetWhitelistTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveSwapLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveSwapLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalToAdopted(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalToAdopted((uint32,bytes32))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connextion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceReceiveLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavePortalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavePortalFeeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedRouterOwnerTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterApprovalForPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSwapAPrecise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapAdminBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapLPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapVirtualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoutersPerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promiseRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAssetWhitelistRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterWhitelistRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rampA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reconciledTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId((uint32,bytes32),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapLiquidityImbalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renounced", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayAavePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAavePortalFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescindDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerWhitelistRemoved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerWhitelistTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavePortalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRoutersPerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPromiseRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerFeeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSponsorVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopRampA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapExact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unapproveRouterForPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSwapAdminFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xcall", data: BytesLike): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "DiamondCutProposed(tuple[],address,bytes,uint256)": EventFragment;
    "DiamondCutRescinded(tuple[],address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCutProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCutRescinded"): EventFragment;
}

export interface DiamondCutEventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface DiamondCutProposedEventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
  deadline: BigNumber;
}
export type DiamondCutProposedEvent = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string, BigNumber],
  DiamondCutProposedEventObject
>;

export type DiamondCutProposedEventFilter =
  TypedEventFilter<DiamondCutProposedEvent>;

export interface DiamondCutRescindedEventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCutRescindedEvent = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string],
  DiamondCutRescindedEventObject
>;

export type DiamondCutRescindedEventFilter =
  TypedEventFilter<DiamondCutRescindedEvent>;

export interface IConnextHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConnextHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aavePool(overrides?: CallOverrides): Promise<[string]>;

    aavePortalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addConnextion(
      _domain: BigNumberish,
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStableSwapPool(
      _canonical: TokenIdStruct,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSwapLiquidity(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adoptedToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<[TokenIdStructOutput]>;

    "adoptedToLocalPools(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "adoptedToLocalPools((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    approveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approvedAssets(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvedRelayers(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvedSequencers(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    assetWhitelistRemoved(overrides?: CallOverrides): Promise<[boolean]>;

    assetWhitelistTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeRouter(overrides?: CallOverrides): Promise<[string]>;

    bumpTransfer(
      _transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateRemoveSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    calculateRemoveSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSwap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSwapTokenAmount(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "canonicalToAdopted(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "canonicalToAdopted((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claim(
      _recipient: string,
      _transferIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connextion(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domain(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    forceReceiveLocal(
      _params: CallParamsStruct,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      _canonicalId: BytesLike,
      _canonicalDomain: BigNumberish,
      _originSender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAavePortalDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAavePortalFeeDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposedRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposedRouterOwnerTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRouterApproval(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRouterApprovalForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRouterRecipient(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapA(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapAPrecise(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapAdminBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapLPToken(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapStorage(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[SwapUtils.SwapStructOutput]>;

    getSwapToken(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapTokenBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapTokenIndex(
      canonicalId: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSwapVirtualPrice(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initializeSwap(
      _canonicalId: BytesLike,
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      lpTokenTargetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateClaim(
      _domain: BigNumberish,
      _recipient: string,
      _transferIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    onReceive(
      _origin: BigNumberish,
      _sender: BytesLike,
      _tokenDomain: BigNumberish,
      _tokenAddress: BytesLike,
      _localToken: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    promiseRouter(overrides?: CallOverrides): Promise<[string]>;

    proposeAssetWhitelistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeDiamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeRouterWhitelistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    rampA(
      canonicalId: BytesLike,
      futureA: BigNumberish,
      futureTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reconciledTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    relayerFeeRouter(overrides?: CallOverrides): Promise<[string]>;

    relayerFees(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "removeAssetId((uint32,bytes32),address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAssetId(bytes32,address)"(
      _key: BytesLike,
      _adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAssetWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouterWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSwapLiquidityImbalance(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounced(overrides?: CallOverrides): Promise<[boolean]>;

    repayAavePortal(
      _params: CallParamsStruct,
      _local: string,
      _originSender: string,
      _bridgedAmt: BigNumberish,
      _nonce: BigNumberish,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      _maxIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayAavePortalFor(
      _params: CallParamsStruct,
      _adopted: string,
      _originSender: string,
      _bridgedAmt: BigNumberish,
      _nonce: BigNumberish,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescindDiamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routedTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    routerBalances(
      _router: string,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    routerWhitelistRemoved(overrides?: CallOverrides): Promise<[boolean]>;

    routerWhitelistTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAavePortalFee(
      _aavePortalFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBridgeRouter(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityFeeNumerator(
      _numerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRoutersPerTransfer(
      _newMaxRouters: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPromiseRouter(
      _promiseRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRelayerFeeRouter(
      _relayerFeeRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSponsorVault(
      _sponsorVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAdminFee(
      canonicalId: BytesLike,
      newAdminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      canonicalId: BytesLike,
      newSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRegistry(
      _tokenRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupAsset(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupRouter(
      router: string,
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorVault(overrides?: CallOverrides): Promise<[string]>;

    stopRampA(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExact(
      canonicalId: BytesLike,
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactOut(
      canonicalId: BytesLike,
      amountOut: BigNumberish,
      assetIn: string,
      assetOut: string,
      maxAmountIn: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<[string]>;

    transferRelayer(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unapproveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSwapAdminFees(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xcall(
      _args: XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aavePool(overrides?: CallOverrides): Promise<string>;

  aavePortalFee(overrides?: CallOverrides): Promise<BigNumber>;

  acceptProposedOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptProposedRouterOwner(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addConnextion(
    _domain: BigNumberish,
    _connext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRouterLiquidity(
    _amount: BigNumberish,
    _local: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRouterLiquidityFor(
    _amount: BigNumberish,
    _local: string,
    _router: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSequencer(
    _sequencer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStableSwapPool(
    _canonical: TokenIdStruct,
    _stableSwapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSwapLiquidity(
    canonicalId: BytesLike,
    amounts: BigNumberish[],
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adoptedToCanonical(
    _adopted: string,
    overrides?: CallOverrides
  ): Promise<TokenIdStructOutput>;

  "adoptedToLocalPools(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "adoptedToLocalPools((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  approveRouterForPortal(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approvedAssets(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approvedAssets((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvedRelayers(
    _relayer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvedSequencers(
    _sequencer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  assetWhitelistRemoved(overrides?: CallOverrides): Promise<boolean>;

  assetWhitelistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeRouter(overrides?: CallOverrides): Promise<string>;

  bumpTransfer(
    _transferId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateRemoveSwapLiquidity(
    canonicalId: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  calculateRemoveSwapLiquidityOneToken(
    canonicalId: BytesLike,
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwap(
    canonicalId: BytesLike,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwapTokenAmount(
    canonicalId: BytesLike,
    amounts: BigNumberish[],
    deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "canonicalToAdopted(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "canonicalToAdopted((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  claim(
    _recipient: string,
    _transferIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connextion(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  diamondCut(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domain(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    _args: ExecuteArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executor(overrides?: CallOverrides): Promise<string>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  forceReceiveLocal(
    _params: CallParamsStruct,
    _amount: BigNumberish,
    _nonce: BigNumberish,
    _canonicalId: BytesLike,
    _canonicalDomain: BigNumberish,
    _originSender: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAavePortalDebt(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAavePortalFeeDebt(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposedRouterOwner(
    _router: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposedRouterOwnerTimestamp(
    _router: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRouterApproval(
    _router: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRouterApprovalForPortal(
    _router: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRouterOwner(_router: string, overrides?: CallOverrides): Promise<string>;

  getRouterRecipient(
    _router: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapA(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapAPrecise(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapAdminBalance(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapLPToken(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapStorage(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<SwapUtils.SwapStructOutput>;

  getSwapToken(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapTokenBalance(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapTokenIndex(
    canonicalId: BytesLike,
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getSwapVirtualPrice(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initializeSwap(
    _canonicalId: BytesLike,
    _pooledTokens: string[],
    decimals: BigNumberish[],
    lpTokenName: string,
    lpTokenSymbol: string,
    _a: BigNumberish,
    _fee: BigNumberish,
    _adminFee: BigNumberish,
    lpTokenTargetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateClaim(
    _domain: BigNumberish,
    _recipient: string,
    _transferIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  onReceive(
    _origin: BigNumberish,
    _sender: BytesLike,
    _tokenDomain: BigNumberish,
    _tokenAddress: BytesLike,
    _localToken: string,
    _amount: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  promiseRouter(overrides?: CallOverrides): Promise<string>;

  proposeAssetWhitelistRemoval(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeDiamondCut(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeNewOwner(
    newlyProposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeRouterOwner(
    router: string,
    proposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeRouterWhitelistRemoval(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  rampA(
    canonicalId: BytesLike,
    futureA: BigNumberish,
    futureTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reconciledTransfers(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  relayerFeeRouter(overrides?: CallOverrides): Promise<string>;

  relayerFees(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "removeAssetId((uint32,bytes32),address)"(
    _canonical: TokenIdStruct,
    _adoptedAssetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAssetId(bytes32,address)"(
    _key: BytesLike,
    _adoptedAssetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAssetWhitelist(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouterLiquidity(
    _amount: BigNumberish,
    _local: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouterLiquidityFor(
    _amount: BigNumberish,
    _local: string,
    _to: string,
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouterWhitelist(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSequencer(
    _sequencer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSwapLiquidity(
    canonicalId: BytesLike,
    amount: BigNumberish,
    minAmounts: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSwapLiquidityImbalance(
    canonicalId: BytesLike,
    amounts: BigNumberish[],
    maxBurnAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSwapLiquidityOneToken(
    canonicalId: BytesLike,
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    minAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounced(overrides?: CallOverrides): Promise<boolean>;

  repayAavePortal(
    _params: CallParamsStruct,
    _local: string,
    _originSender: string,
    _bridgedAmt: BigNumberish,
    _nonce: BigNumberish,
    _backingAmount: BigNumberish,
    _feeAmount: BigNumberish,
    _maxIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayAavePortalFor(
    _params: CallParamsStruct,
    _adopted: string,
    _originSender: string,
    _bridgedAmt: BigNumberish,
    _nonce: BigNumberish,
    _backingAmount: BigNumberish,
    _feeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescindDiamondCut(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routedTransfers(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  routerBalances(
    _router: string,
    _asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  routerWhitelistRemoved(overrides?: CallOverrides): Promise<boolean>;

  routerWhitelistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  setAavePool(
    _aavePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAavePortalFee(
    _aavePortalFeeNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBridgeRouter(
    _bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExecutor(
    _executor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityFeeNumerator(
    _numerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRoutersPerTransfer(
    _newMaxRouters: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPromiseRouter(
    _promiseRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRelayerFeeRouter(
    _relayerFeeRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouterRecipient(
    router: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSponsorVault(
    _sponsorVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAdminFee(
    canonicalId: BytesLike,
    newAdminFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    canonicalId: BytesLike,
    newSwapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRegistry(
    _tokenRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupAsset(
    _canonical: TokenIdStruct,
    _adoptedAssetId: string,
    _stableSwapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupRouter(
    router: string,
    owner: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorVault(overrides?: CallOverrides): Promise<string>;

  stopRampA(
    canonicalId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    canonicalId: BytesLike,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExact(
    canonicalId: BytesLike,
    amountIn: BigNumberish,
    assetIn: string,
    assetOut: string,
    minAmountOut: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactOut(
    canonicalId: BytesLike,
    amountOut: BigNumberish,
    assetIn: string,
    assetOut: string,
    maxAmountIn: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRegistry(overrides?: CallOverrides): Promise<string>;

  transferRelayer(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  unapproveRouterForPortal(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSwapAdminFees(
    canonicalId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xcall(
    _args: XCallArgsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    aavePool(overrides?: CallOverrides): Promise<string>;

    aavePortalFee(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedOwner(overrides?: CallOverrides): Promise<void>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addConnextion(
      _domain: BigNumberish,
      _connext: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRelayer(_relayer: string, overrides?: CallOverrides): Promise<void>;

    addRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSequencer(_sequencer: string, overrides?: CallOverrides): Promise<void>;

    addStableSwapPool(
      _canonical: TokenIdStruct,
      _stableSwapPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSwapLiquidity(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adoptedToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<TokenIdStructOutput>;

    "adoptedToLocalPools(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "adoptedToLocalPools((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    approveRouterForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "approvedAssets(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedRelayers(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedSequencers(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetWhitelistRemoved(overrides?: CallOverrides): Promise<boolean>;

    assetWhitelistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeRouter(overrides?: CallOverrides): Promise<string>;

    bumpTransfer(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRemoveSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    calculateRemoveSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapTokenAmount(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canonicalToAdopted(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "canonicalToAdopted((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      _recipient: string,
      _transferIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    connextion(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    executor(overrides?: CallOverrides): Promise<string>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    forceReceiveLocal(
      _params: CallParamsStruct,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      _canonicalId: BytesLike,
      _canonicalDomain: BigNumberish,
      _originSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAavePortalDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAavePortalFeeDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposedRouterOwnerTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterApproval(
      _router: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRouterApprovalForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRouterOwner(_router: string, overrides?: CallOverrides): Promise<string>;

    getRouterRecipient(
      _router: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapA(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAPrecise(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAdminBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapLPToken(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapStorage(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<SwapUtils.SwapStructOutput>;

    getSwapToken(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapTokenBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapTokenIndex(
      canonicalId: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getSwapVirtualPrice(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeSwap(
      _canonicalId: BytesLike,
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      lpTokenTargetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateClaim(
      _domain: BigNumberish,
      _recipient: string,
      _transferIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    onReceive(
      _origin: BigNumberish,
      _sender: BytesLike,
      _tokenDomain: BigNumberish,
      _tokenAddress: BytesLike,
      _localToken: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    promiseRouter(overrides?: CallOverrides): Promise<string>;

    proposeAssetWhitelistRemoval(overrides?: CallOverrides): Promise<void>;

    proposeDiamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeRouterWhitelistRemoval(overrides?: CallOverrides): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rampA(
      canonicalId: BytesLike,
      futureA: BigNumberish,
      futureTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reconciledTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    relayerFeeRouter(overrides?: CallOverrides): Promise<string>;

    relayerFees(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeAssetId((uint32,bytes32),address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAssetId(bytes32,address)"(
      _key: BytesLike,
      _adoptedAssetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAssetWhitelist(overrides?: CallOverrides): Promise<void>;

    removeRelayer(_relayer: string, overrides?: CallOverrides): Promise<void>;

    removeRouter(router: string, overrides?: CallOverrides): Promise<void>;

    removeRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRouterWhitelist(overrides?: CallOverrides): Promise<void>;

    removeSequencer(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeSwapLiquidityImbalance(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounced(overrides?: CallOverrides): Promise<boolean>;

    repayAavePortal(
      _params: CallParamsStruct,
      _local: string,
      _originSender: string,
      _bridgedAmt: BigNumberish,
      _nonce: BigNumberish,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      _maxIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayAavePortalFor(
      _params: CallParamsStruct,
      _adopted: string,
      _originSender: string,
      _bridgedAmt: BigNumberish,
      _nonce: BigNumberish,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rescindDiamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    routedTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    routerBalances(
      _router: string,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerWhitelistRemoved(overrides?: CallOverrides): Promise<boolean>;

    routerWhitelistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    setAavePool(_aavePool: string, overrides?: CallOverrides): Promise<void>;

    setAavePortalFee(
      _aavePortalFeeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeRouter(_bridge: string, overrides?: CallOverrides): Promise<void>;

    setExecutor(_executor: string, overrides?: CallOverrides): Promise<void>;

    setLiquidityFeeNumerator(
      _numerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRoutersPerTransfer(
      _newMaxRouters: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPromiseRouter(
      _promiseRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerFeeRouter(
      _relayerFeeRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSponsorVault(
      _sponsorVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAdminFee(
      canonicalId: BytesLike,
      newAdminFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFee(
      canonicalId: BytesLike,
      newSwapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenRegistry(
      _tokenRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupAsset(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupRouter(
      router: string,
      owner: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorVault(overrides?: CallOverrides): Promise<string>;

    stopRampA(canonicalId: BytesLike, overrides?: CallOverrides): Promise<void>;

    swap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExact(
      canonicalId: BytesLike,
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactOut(
      canonicalId: BytesLike,
      amountOut: BigNumberish,
      assetIn: string,
      assetOut: string,
      maxAmountIn: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    transferRelayer(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    unapproveRouterForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawSwapAdminFees(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    xcall(_args: XCallArgsStruct, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "DiamondCutProposed(tuple[],address,bytes,uint256)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null,
      deadline?: null
    ): DiamondCutProposedEventFilter;
    DiamondCutProposed(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null,
      deadline?: null
    ): DiamondCutProposedEventFilter;

    "DiamondCutRescinded(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutRescindedEventFilter;
    DiamondCutRescinded(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutRescindedEventFilter;
  };

  estimateGas: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aavePool(overrides?: CallOverrides): Promise<BigNumber>;

    aavePortalFee(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addConnextion(
      _domain: BigNumberish,
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStableSwapPool(
      _canonical: TokenIdStruct,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSwapLiquidity(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adoptedToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "adoptedToLocalPools(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "adoptedToLocalPools((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approvedAssets(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedRelayers(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedSequencers(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWhitelistRemoved(overrides?: CallOverrides): Promise<BigNumber>;

    assetWhitelistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    bumpTransfer(
      _transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateRemoveSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapTokenAmount(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canonicalToAdopted(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canonicalToAdopted((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _recipient: string,
      _transferIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connextion(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    forceReceiveLocal(
      _params: CallParamsStruct,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      _canonicalId: BytesLike,
      _canonicalDomain: BigNumberish,
      _originSender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAavePortalDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAavePortalFeeDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedRouterOwnerTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterApproval(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterApprovalForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterRecipient(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapA(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAPrecise(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAdminBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapLPToken(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapStorage(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToken(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapTokenBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapTokenIndex(
      canonicalId: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapVirtualPrice(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeSwap(
      _canonicalId: BytesLike,
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      lpTokenTargetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateClaim(
      _domain: BigNumberish,
      _recipient: string,
      _transferIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    onReceive(
      _origin: BigNumberish,
      _sender: BytesLike,
      _tokenDomain: BigNumberish,
      _tokenAddress: BytesLike,
      _localToken: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    promiseRouter(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAssetWhitelistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeDiamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeRouterWhitelistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rampA(
      canonicalId: BytesLike,
      futureA: BigNumberish,
      futureTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reconciledTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayerFeeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    relayerFees(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeAssetId((uint32,bytes32),address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAssetId(bytes32,address)"(
      _key: BytesLike,
      _adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAssetWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouterWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSwapLiquidityImbalance(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounced(overrides?: CallOverrides): Promise<BigNumber>;

    repayAavePortal(
      _params: CallParamsStruct,
      _local: string,
      _originSender: string,
      _bridgedAmt: BigNumberish,
      _nonce: BigNumberish,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      _maxIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayAavePortalFor(
      _params: CallParamsStruct,
      _adopted: string,
      _originSender: string,
      _bridgedAmt: BigNumberish,
      _nonce: BigNumberish,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescindDiamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routedTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerBalances(
      _router: string,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerWhitelistRemoved(overrides?: CallOverrides): Promise<BigNumber>;

    routerWhitelistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAavePortalFee(
      _aavePortalFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBridgeRouter(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityFeeNumerator(
      _numerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRoutersPerTransfer(
      _newMaxRouters: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPromiseRouter(
      _promiseRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRelayerFeeRouter(
      _relayerFeeRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSponsorVault(
      _sponsorVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAdminFee(
      canonicalId: BytesLike,
      newAdminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      canonicalId: BytesLike,
      newSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRegistry(
      _tokenRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupAsset(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupRouter(
      router: string,
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorVault(overrides?: CallOverrides): Promise<BigNumber>;

    stopRampA(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExact(
      canonicalId: BytesLike,
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactOut(
      canonicalId: BytesLike,
      amountOut: BigNumberish,
      assetIn: string,
      assetOut: string,
      maxAmountIn: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    transferRelayer(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unapproveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSwapAdminFees(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xcall(
      _args: XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LIQUIDITY_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDITY_FEE_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aavePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aavePortalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addConnextion(
      _domain: BigNumberish,
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStableSwapPool(
      _canonical: TokenIdStruct,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSwapLiquidity(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adoptedToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "adoptedToLocalPools(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "adoptedToLocalPools((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approvedAssets(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedRelayers(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedSequencers(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetWhitelistRemoved(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetWhitelistTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bumpTransfer(
      _transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateRemoveSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRemoveSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapTokenAmount(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canonicalToAdopted(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canonicalToAdopted((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _recipient: string,
      _transferIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connextion(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceReceiveLocal(
      _params: CallParamsStruct,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      _canonicalId: BytesLike,
      _canonicalDomain: BigNumberish,
      _originSender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAavePortalDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAavePortalFeeDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedRouterOwnerTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterApproval(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterApprovalForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterRecipient(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapA(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapAPrecise(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapAdminBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapLPToken(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapStorage(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapToken(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapTokenBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapTokenIndex(
      canonicalId: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapVirtualPrice(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeSwap(
      _canonicalId: BytesLike,
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      lpTokenTargetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateClaim(
      _domain: BigNumberish,
      _recipient: string,
      _transferIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxRoutersPerTransfer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onReceive(
      _origin: BigNumberish,
      _sender: BytesLike,
      _tokenDomain: BigNumberish,
      _tokenAddress: BytesLike,
      _localToken: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    promiseRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeAssetWhitelistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeDiamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeRouterWhitelistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rampA(
      canonicalId: BytesLike,
      futureA: BigNumberish,
      futureTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reconciledTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerFeeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayerFees(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeAssetId((uint32,bytes32),address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAssetId(bytes32,address)"(
      _key: BytesLike,
      _adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAssetWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouterWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapLiquidityImbalance(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayAavePortal(
      _params: CallParamsStruct,
      _local: string,
      _originSender: string,
      _bridgedAmt: BigNumberish,
      _nonce: BigNumberish,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      _maxIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayAavePortalFor(
      _params: CallParamsStruct,
      _adopted: string,
      _originSender: string,
      _bridgedAmt: BigNumberish,
      _nonce: BigNumberish,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescindDiamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routedTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerBalances(
      _router: string,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerWhitelistRemoved(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerWhitelistTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAavePortalFee(
      _aavePortalFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeRouter(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityFeeNumerator(
      _numerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRoutersPerTransfer(
      _newMaxRouters: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPromiseRouter(
      _promiseRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerFeeRouter(
      _relayerFeeRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSponsorVault(
      _sponsorVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAdminFee(
      canonicalId: BytesLike,
      newAdminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      canonicalId: BytesLike,
      newSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRegistry(
      _tokenRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupAsset(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupRouter(
      router: string,
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopRampA(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExact(
      canonicalId: BytesLike,
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactOut(
      canonicalId: BytesLike,
      amountOut: BigNumberish,
      assetIn: string,
      assetOut: string,
      maxAmountIn: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferRelayer(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unapproveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSwapAdminFees(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xcall(
      _args: XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface IConnextHandlerMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Call<BigNumber>;

  LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Call<BigNumber>;

  aavePool(overrides?: CallOverrides): Call<string>;

  aavePortalFee(overrides?: CallOverrides): Call<BigNumber>;

  adoptedToCanonical(
    _adopted: string,
    overrides?: CallOverrides
  ): Call<TokenIdStructOutput>;

  "adoptedToLocalPools(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Call<string>;

  "adoptedToLocalPools((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Call<string>;

  "approvedAssets(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Call<boolean>;

  "approvedAssets((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Call<boolean>;

  approvedRelayers(_relayer: string, overrides?: CallOverrides): Call<boolean>;

  approvedSequencers(
    _sequencer: string,
    overrides?: CallOverrides
  ): Call<boolean>;

  assetWhitelistRemoved(overrides?: CallOverrides): Call<boolean>;

  assetWhitelistTimestamp(overrides?: CallOverrides): Call<BigNumber>;

  bridgeRouter(overrides?: CallOverrides): Call<string>;

  calculateRemoveSwapLiquidity(
    canonicalId: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber[]>;

  calculateRemoveSwapLiquidityOneToken(
    canonicalId: BytesLike,
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  calculateSwap(
    canonicalId: BytesLike,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  calculateSwapTokenAmount(
    canonicalId: BytesLike,
    amounts: BigNumberish[],
    deposit: boolean,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  "canonicalToAdopted(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Call<string>;

  "canonicalToAdopted((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Call<string>;

  connextion(_domain: BigNumberish, overrides?: CallOverrides): Call<string>;

  delay(overrides?: CallOverrides): Call<BigNumber>;

  domain(overrides?: CallOverrides): Call<BigNumber>;

  executor(overrides?: CallOverrides): Call<string>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Call<string>;

  facetAddresses(overrides?: CallOverrides): Call<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Call<string[]>;

  facets(overrides?: CallOverrides): Call<IDiamondLoupe.FacetStructOutput[]>;

  getAavePortalDebt(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  getAavePortalFeeDebt(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  getProposedRouterOwner(
    _router: string,
    overrides?: CallOverrides
  ): Call<string>;

  getProposedRouterOwnerTimestamp(
    _router: string,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  getRouterApproval(_router: string, overrides?: CallOverrides): Call<boolean>;

  getRouterApprovalForPortal(
    _router: string,
    overrides?: CallOverrides
  ): Call<boolean>;

  getRouterOwner(_router: string, overrides?: CallOverrides): Call<string>;

  getRouterRecipient(_router: string, overrides?: CallOverrides): Call<string>;

  getSwapA(canonicalId: BytesLike, overrides?: CallOverrides): Call<BigNumber>;

  getSwapAPrecise(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  getSwapAdminBalance(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  getSwapLPToken(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Call<string>;

  getSwapStorage(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Call<SwapUtils.SwapStructOutput>;

  getSwapToken(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Call<string>;

  getSwapTokenBalance(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  getSwapTokenIndex(
    canonicalId: BytesLike,
    tokenAddress: string,
    overrides?: CallOverrides
  ): Call<number>;

  getSwapVirtualPrice(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  maxRoutersPerTransfer(overrides?: CallOverrides): Call<BigNumber>;

  nonce(overrides?: CallOverrides): Call<BigNumber>;

  owner(overrides?: CallOverrides): Call<string>;

  promiseRouter(overrides?: CallOverrides): Call<string>;

  proposed(overrides?: CallOverrides): Call<string>;

  proposedTimestamp(overrides?: CallOverrides): Call<BigNumber>;

  reconciledTransfers(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Call<boolean>;

  relayerFeeRouter(overrides?: CallOverrides): Call<string>;

  relayerFees(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  renounced(overrides?: CallOverrides): Call<boolean>;

  routedTransfers(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Call<string[]>;

  routerBalances(
    _router: string,
    _asset: string,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  routerWhitelistRemoved(overrides?: CallOverrides): Call<boolean>;

  routerWhitelistTimestamp(overrides?: CallOverrides): Call<BigNumber>;

  sponsorVault(overrides?: CallOverrides): Call<string>;

  tokenRegistry(overrides?: CallOverrides): Call<string>;

  transferRelayer(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Call<string>;
}
