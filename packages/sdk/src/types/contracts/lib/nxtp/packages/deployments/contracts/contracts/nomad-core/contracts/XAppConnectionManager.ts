/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../../../common";

export interface XAppConnectionManagerInterface extends utils.Interface {
  functions: {
    "domainToReplica(uint32)": FunctionFragment;
    "home()": FunctionFragment;
    "isReplica(address)": FunctionFragment;
    "localDomain()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerEnrollReplica(address,uint32)": FunctionFragment;
    "ownerUnenrollReplica(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replicaToDomain(address)": FunctionFragment;
    "setHome(address)": FunctionFragment;
    "setWatcherPermission(address,uint32,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unenrollReplica(uint32,bytes32,bytes)": FunctionFragment;
    "watcherPermission(address,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "domainToReplica"
      | "home"
      | "isReplica"
      | "localDomain"
      | "owner"
      | "ownerEnrollReplica"
      | "ownerUnenrollReplica"
      | "renounceOwnership"
      | "replicaToDomain"
      | "setHome"
      | "setWatcherPermission"
      | "transferOwnership"
      | "unenrollReplica"
      | "watcherPermission"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "domainToReplica",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "home", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isReplica",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerEnrollReplica",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerUnenrollReplica",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replicaToDomain",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHome",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWatcherPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unenrollReplica",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "watcherPermission",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "domainToReplica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "home", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isReplica", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerEnrollReplica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerUnenrollReplica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replicaToDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHome", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWatcherPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unenrollReplica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "watcherPermission",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ReplicaEnrolled(uint32,address)": EventFragment;
    "ReplicaUnenrolled(uint32,address)": EventFragment;
    "WatcherPermissionSet(uint32,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReplicaEnrolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReplicaUnenrolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WatcherPermissionSet"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReplicaEnrolledEventObject {
  domain: number;
  replica: string;
}
export type ReplicaEnrolledEvent = TypedEvent<
  [number, string],
  ReplicaEnrolledEventObject
>;

export type ReplicaEnrolledEventFilter = TypedEventFilter<ReplicaEnrolledEvent>;

export interface ReplicaUnenrolledEventObject {
  domain: number;
  replica: string;
}
export type ReplicaUnenrolledEvent = TypedEvent<
  [number, string],
  ReplicaUnenrolledEventObject
>;

export type ReplicaUnenrolledEventFilter =
  TypedEventFilter<ReplicaUnenrolledEvent>;

export interface WatcherPermissionSetEventObject {
  domain: number;
  watcher: string;
  access: boolean;
}
export type WatcherPermissionSetEvent = TypedEvent<
  [number, string, boolean],
  WatcherPermissionSetEventObject
>;

export type WatcherPermissionSetEventFilter =
  TypedEventFilter<WatcherPermissionSetEvent>;

export interface XAppConnectionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XAppConnectionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    domainToReplica(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    home(overrides?: CallOverrides): Promise<[string]>;

    isReplica(
      _replica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerEnrollReplica(
      _replica: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerUnenrollReplica(
      _replica: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replicaToDomain(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    setHome(
      _home: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWatcherPermission(
      _watcher: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unenrollReplica(
      _domain: PromiseOrValue<BigNumberish>,
      _updater: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    watcherPermission(
      _watcher: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  domainToReplica(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  home(overrides?: CallOverrides): Promise<string>;

  isReplica(
    _replica: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerEnrollReplica(
    _replica: PromiseOrValue<string>,
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerUnenrollReplica(
    _replica: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replicaToDomain(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  setHome(
    _home: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWatcherPermission(
    _watcher: PromiseOrValue<string>,
    _domain: PromiseOrValue<BigNumberish>,
    _access: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unenrollReplica(
    _domain: PromiseOrValue<BigNumberish>,
    _updater: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  watcherPermission(
    _watcher: PromiseOrValue<string>,
    _domain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    domainToReplica(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    home(overrides?: CallOverrides): Promise<string>;

    isReplica(
      _replica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerEnrollReplica(
      _replica: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerUnenrollReplica(
      _replica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replicaToDomain(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    setHome(
      _home: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWatcherPermission(
      _watcher: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _access: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unenrollReplica(
      _domain: PromiseOrValue<BigNumberish>,
      _updater: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    watcherPermission(
      _watcher: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReplicaEnrolled(uint32,address)"(
      domain?: PromiseOrValue<BigNumberish> | null,
      replica?: null
    ): ReplicaEnrolledEventFilter;
    ReplicaEnrolled(
      domain?: PromiseOrValue<BigNumberish> | null,
      replica?: null
    ): ReplicaEnrolledEventFilter;

    "ReplicaUnenrolled(uint32,address)"(
      domain?: PromiseOrValue<BigNumberish> | null,
      replica?: null
    ): ReplicaUnenrolledEventFilter;
    ReplicaUnenrolled(
      domain?: PromiseOrValue<BigNumberish> | null,
      replica?: null
    ): ReplicaUnenrolledEventFilter;

    "WatcherPermissionSet(uint32,address,bool)"(
      domain?: PromiseOrValue<BigNumberish> | null,
      watcher?: null,
      access?: null
    ): WatcherPermissionSetEventFilter;
    WatcherPermissionSet(
      domain?: PromiseOrValue<BigNumberish> | null,
      watcher?: null,
      access?: null
    ): WatcherPermissionSetEventFilter;
  };

  estimateGas: {
    domainToReplica(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    home(overrides?: CallOverrides): Promise<BigNumber>;

    isReplica(
      _replica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerEnrollReplica(
      _replica: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerUnenrollReplica(
      _replica: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replicaToDomain(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setHome(
      _home: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWatcherPermission(
      _watcher: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unenrollReplica(
      _domain: PromiseOrValue<BigNumberish>,
      _updater: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    watcherPermission(
      _watcher: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    domainToReplica(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    home(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isReplica(
      _replica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerEnrollReplica(
      _replica: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerUnenrollReplica(
      _replica: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replicaToDomain(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setHome(
      _home: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWatcherPermission(
      _watcher: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unenrollReplica(
      _domain: PromiseOrValue<BigNumberish>,
      _updater: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    watcherPermission(
      _watcher: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
