/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  Fragment,
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface MockAddrMapperInterface extends utils.Interface {
  functions: {
    "getAddressMapping(string,address)": FunctionFragment;
    "getAddressNestedMapping(string,address,address)": FunctionFragment;
    "getProviders()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepareToRedeploythisAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMapping(string,address,address)": FunctionFragment;
    "setNestedMapping(string,address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAddressMapping"
      | "getAddressNestedMapping"
      | "getProviders"
      | "owner"
      | "prepareToRedeploythisAddress"
      | "renounceOwnership"
      | "setMapping"
      | "setNestedMapping"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAddressMapping",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressNestedMapping",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareToRedeploythisAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMapping",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNestedMapping",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAddressMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressNestedMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareToRedeploythisAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMapping", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNestedMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "MappingChanged(address[],address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MappingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface MappingChangedEventObject {
  keyAddress: string[];
  mappedAddress: string;
}
export type MappingChangedEvent = TypedEvent<
  [string[], string],
  MappingChangedEventObject
>;

export type MappingChangedEventFilter = TypedEventFilter<MappingChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MockAddrMapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockAddrMapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAddressMapping(
      providerName: string,
      inputAddr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddressNestedMapping(
      providerName: string,
      inputAddr1: string,
      inputAddr2: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProviders(overrides?: CallOverrides): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prepareToRedeploythisAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMapping(
      providerName: string,
      keyAddr: string,
      returnedAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNestedMapping(
      providerName: string,
      keyAddr1: string,
      keyAddr2: string,
      returnedAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAddressMapping(
    providerName: string,
    inputAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddressNestedMapping(
    providerName: string,
    inputAddr1: string,
    inputAddr2: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getProviders(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  prepareToRedeploythisAddress(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMapping(
    providerName: string,
    keyAddr: string,
    returnedAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNestedMapping(
    providerName: string,
    keyAddr1: string,
    keyAddr2: string,
    returnedAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAddressMapping(
      providerName: string,
      inputAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressNestedMapping(
      providerName: string,
      inputAddr1: string,
      inputAddr2: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getProviders(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    prepareToRedeploythisAddress(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMapping(
      providerName: string,
      keyAddr: string,
      returnedAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNestedMapping(
      providerName: string,
      keyAddr1: string,
      keyAddr2: string,
      returnedAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MappingChanged(address[],address)"(
      keyAddress?: null,
      mappedAddress?: null
    ): MappingChangedEventFilter;
    MappingChanged(
      keyAddress?: null,
      mappedAddress?: null
    ): MappingChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getAddressMapping(
      providerName: string,
      inputAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressNestedMapping(
      providerName: string,
      inputAddr1: string,
      inputAddr2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviders(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepareToRedeploythisAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMapping(
      providerName: string,
      keyAddr: string,
      returnedAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNestedMapping(
      providerName: string,
      keyAddr1: string,
      keyAddr2: string,
      returnedAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddressMapping(
      providerName: string,
      inputAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressNestedMapping(
      providerName: string,
      inputAddr1: string,
      inputAddr2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareToRedeploythisAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMapping(
      providerName: string,
      keyAddr: string,
      returnedAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNestedMapping(
      providerName: string,
      keyAddr1: string,
      keyAddr2: string,
      returnedAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface MockAddrMapperMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  getAddressMapping(
    providerName: string,
    inputAddr: string,
    overrides?: CallOverrides
  ): Call<string>;

  getAddressNestedMapping(
    providerName: string,
    inputAddr1: string,
    inputAddr2: string,
    overrides?: CallOverrides
  ): Call<string>;

  getProviders(overrides?: CallOverrides): Call<string[]>;

  owner(overrides?: CallOverrides): Call<string>;
}
