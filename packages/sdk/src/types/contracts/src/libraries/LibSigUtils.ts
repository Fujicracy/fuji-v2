/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace LibSigUtils {
  export type PermitStruct = {
    chainid: BigNumberish;
    owner: string;
    operator: string;
    receiver: string;
    amount: BigNumberish;
    nonce: BigNumberish;
    deadline: BigNumberish;
    actionArgsHash: BytesLike;
  };

  export type PermitStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    chainid: BigNumber;
    owner: string;
    operator: string;
    receiver: string;
    amount: BigNumber;
    nonce: BigNumber;
    deadline: BigNumber;
    actionArgsHash: string;
  };
}

export interface LibSigUtilsInterface extends utils.Interface {
  functions: {
    "buildPermitStruct(address,address,address,uint256,uint256,address,bytes32)": FunctionFragment;
    "getActionArgsHash(IRouter.Action[],bytes[])": FunctionFragment;
    "getHashTypedDataV4Digest(bytes32,bytes32)": FunctionFragment;
    "getStructHashBorrow((uint256,address,address,address,uint256,uint256,uint256,bytes32))": FunctionFragment;
    "getStructHashWithdraw((uint256,address,address,address,uint256,uint256,uint256,bytes32))": FunctionFragment;
    "getZeroPermitEncodedArgs(address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buildPermitStruct"
      | "getActionArgsHash"
      | "getHashTypedDataV4Digest"
      | "getStructHashBorrow"
      | "getStructHashWithdraw"
      | "getZeroPermitEncodedArgs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buildPermitStruct",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionArgsHash",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getHashTypedDataV4Digest",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStructHashBorrow",
    values: [LibSigUtils.PermitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getStructHashWithdraw",
    values: [LibSigUtils.PermitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getZeroPermitEncodedArgs",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buildPermitStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionArgsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHashTypedDataV4Digest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStructHashBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStructHashWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZeroPermitEncodedArgs",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LibSigUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibSigUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buildPermitStruct(
      owner: string,
      operator: string,
      receiver: string,
      amount: BigNumberish,
      plusNonce: BigNumberish,
      vault_: string,
      actionArgsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [LibSigUtils.PermitStructOutput] & {
        permit: LibSigUtils.PermitStructOutput;
      }
    >;

    getActionArgsHash(
      actions: BigNumberish[],
      args: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHashTypedDataV4Digest(
      domainSeperator: BytesLike,
      structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStructHashBorrow(
      permit: LibSigUtils.PermitStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStructHashWithdraw(
      permit: LibSigUtils.PermitStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getZeroPermitEncodedArgs(
      vault: string,
      owner: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  buildPermitStruct(
    owner: string,
    operator: string,
    receiver: string,
    amount: BigNumberish,
    plusNonce: BigNumberish,
    vault_: string,
    actionArgsHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<LibSigUtils.PermitStructOutput>;

  getActionArgsHash(
    actions: BigNumberish[],
    args: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  getHashTypedDataV4Digest(
    domainSeperator: BytesLike,
    structHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getStructHashBorrow(
    permit: LibSigUtils.PermitStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getStructHashWithdraw(
    permit: LibSigUtils.PermitStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getZeroPermitEncodedArgs(
    vault: string,
    owner: string,
    receiver: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    buildPermitStruct(
      owner: string,
      operator: string,
      receiver: string,
      amount: BigNumberish,
      plusNonce: BigNumberish,
      vault_: string,
      actionArgsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<LibSigUtils.PermitStructOutput>;

    getActionArgsHash(
      actions: BigNumberish[],
      args: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    getHashTypedDataV4Digest(
      domainSeperator: BytesLike,
      structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getStructHashBorrow(
      permit: LibSigUtils.PermitStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getStructHashWithdraw(
      permit: LibSigUtils.PermitStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getZeroPermitEncodedArgs(
      vault: string,
      owner: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    buildPermitStruct(
      owner: string,
      operator: string,
      receiver: string,
      amount: BigNumberish,
      plusNonce: BigNumberish,
      vault_: string,
      actionArgsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionArgsHash(
      actions: BigNumberish[],
      args: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHashTypedDataV4Digest(
      domainSeperator: BytesLike,
      structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStructHashBorrow(
      permit: LibSigUtils.PermitStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStructHashWithdraw(
      permit: LibSigUtils.PermitStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getZeroPermitEncodedArgs(
      vault: string,
      owner: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buildPermitStruct(
      owner: string,
      operator: string,
      receiver: string,
      amount: BigNumberish,
      plusNonce: BigNumberish,
      vault_: string,
      actionArgsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActionArgsHash(
      actions: BigNumberish[],
      args: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHashTypedDataV4Digest(
      domainSeperator: BytesLike,
      structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStructHashBorrow(
      permit: LibSigUtils.PermitStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStructHashWithdraw(
      permit: LibSigUtils.PermitStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getZeroPermitEncodedArgs(
      vault: string,
      owner: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

export interface LibSigUtilsMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  buildPermitStruct(
    owner: string,
    operator: string,
    receiver: string,
    amount: BigNumberish,
    plusNonce: BigNumberish,
    vault_: string,
    actionArgsHash: BytesLike,
    overrides?: CallOverrides
  ): Call<LibSigUtils.PermitStructOutput>;

  getActionArgsHash(
    actions: BigNumberish[],
    args: BytesLike[],
    overrides?: CallOverrides
  ): Call<string>;

  getHashTypedDataV4Digest(
    domainSeperator: BytesLike,
    structHash: BytesLike,
    overrides?: CallOverrides
  ): Call<string>;

  getStructHashBorrow(
    permit: LibSigUtils.PermitStruct,
    overrides?: CallOverrides
  ): Call<string>;

  getStructHashWithdraw(
    permit: LibSigUtils.PermitStruct,
    overrides?: CallOverrides
  ): Call<string>;

  getZeroPermitEncodedArgs(
    vault: string,
    owner: string,
    receiver: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Call<string>;
}
