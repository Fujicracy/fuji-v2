/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LibConnextBundlerInterface extends utils.Interface {
  functions: {
    "bridgeWithCall(uint256,address,uint256,IRouter.Action[],bytes[])": FunctionFragment;
    "depositAndBorrow(address,address,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "bridgeWithCall" | "depositAndBorrow"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeWithCall",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndBorrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeWithCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndBorrow",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LibConnextBundler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibConnextBundlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeWithCall(
      destDomain: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      innerActions: PromiseOrValue<BigNumberish>[],
      innerArgs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[number[], string[]]>;

    depositAndBorrow(
      vault: PromiseOrValue<string>,
      router: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]]>;
  };

  bridgeWithCall(
    destDomain: PromiseOrValue<BigNumberish>,
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    innerActions: PromiseOrValue<BigNumberish>[],
    innerArgs: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<[number[], string[]]>;

  depositAndBorrow(
    vault: PromiseOrValue<string>,
    router: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]]>;

  callStatic: {
    bridgeWithCall(
      destDomain: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      innerActions: PromiseOrValue<BigNumberish>[],
      innerArgs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[number[], string[]]>;

    depositAndBorrow(
      vault: PromiseOrValue<string>,
      router: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]]>;
  };

  filters: {};

  estimateGas: {
    bridgeWithCall(
      destDomain: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      innerActions: PromiseOrValue<BigNumberish>[],
      innerArgs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositAndBorrow(
      vault: PromiseOrValue<string>,
      router: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeWithCall(
      destDomain: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      innerActions: PromiseOrValue<BigNumberish>[],
      innerArgs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAndBorrow(
      vault: PromiseOrValue<string>,
      router: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
