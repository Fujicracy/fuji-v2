/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface LibActionBundlerInterface extends utils.Interface {
  functions: {
    "closeWithFlashloan(IVault,address,address,address,uint256,uint256)": FunctionFragment;
    "depositAndBorrow(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "closeWithFlashloan" | "depositAndBorrow"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeWithFlashloan",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndBorrow",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeWithFlashloan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndBorrow",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LibActionBundler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibActionBundlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeWithFlashloan(
      vault: string,
      router: string,
      swapper: string,
      flasher: string,
      withdrawAmount: BigNumberish,
      flashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[], string[]]>;

    depositAndBorrow(
      vault: string,
      amount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[], string[]]>;
  };

  closeWithFlashloan(
    vault: string,
    router: string,
    swapper: string,
    flasher: string,
    withdrawAmount: BigNumberish,
    flashAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number[], string[]]>;

  depositAndBorrow(
    vault: string,
    amount: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number[], string[]]>;

  callStatic: {
    closeWithFlashloan(
      vault: string,
      router: string,
      swapper: string,
      flasher: string,
      withdrawAmount: BigNumberish,
      flashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[], string[]]>;

    depositAndBorrow(
      vault: string,
      amount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[], string[]]>;
  };

  filters: {};

  estimateGas: {
    closeWithFlashloan(
      vault: string,
      router: string,
      swapper: string,
      flasher: string,
      withdrawAmount: BigNumberish,
      flashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositAndBorrow(
      vault: string,
      amount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeWithFlashloan(
      vault: string,
      router: string,
      swapper: string,
      flasher: string,
      withdrawAmount: BigNumberish,
      flashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAndBorrow(
      vault: string,
      amount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

export interface LibActionBundlerMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  closeWithFlashloan(
    vault: string,
    router: string,
    swapper: string,
    flasher: string,
    withdrawAmount: BigNumberish,
    flashAmount: BigNumberish,
    overrides?: CallOverrides
  ): Call<[number[], string[]]>;

  depositAndBorrow(
    vault: string,
    amount: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Call<[number[], string[]]>;
}
