/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  Fragment,
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ConnextRouterInterface extends utils.Interface {
  functions: {
    "HARVESTER_ROLE()": FunctionFragment;
    "HOUSE_KEEPER_ROLE()": FunctionFragment;
    "LIQUIDATOR_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "REBALANCER_ROLE()": FunctionFragment;
    "UNPAUSER_ROLE()": FunctionFragment;
    "WETH9()": FunctionFragment;
    "allowCaller(address,bool)": FunctionFragment;
    "bumpTransfer(bytes32)": FunctionFragment;
    "chief()": FunctionFragment;
    "connext()": FunctionFragment;
    "handler()": FunctionFragment;
    "isAllowedCaller(address)": FunctionFragment;
    "routerByDomain(uint256)": FunctionFragment;
    "setRouter(uint256,address)": FunctionFragment;
    "sweepETH(address)": FunctionFragment;
    "sweepToken(address,address)": FunctionFragment;
    "xBundle(uint8[],bytes[])": FunctionFragment;
    "xBundleConnext(uint8[],bytes[],uint256)": FunctionFragment;
    "xReceive(bytes32,uint256,address,address,uint32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HARVESTER_ROLE"
      | "HOUSE_KEEPER_ROLE"
      | "LIQUIDATOR_ROLE"
      | "PAUSER_ROLE"
      | "REBALANCER_ROLE"
      | "UNPAUSER_ROLE"
      | "WETH9"
      | "allowCaller"
      | "bumpTransfer"
      | "chief"
      | "connext"
      | "handler"
      | "isAllowedCaller"
      | "routerByDomain"
      | "setRouter"
      | "sweepETH"
      | "sweepToken"
      | "xBundle"
      | "xBundleConnext"
      | "xReceive"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HARVESTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HOUSE_KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REBALANCER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNPAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowCaller",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "bumpTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "chief", values?: undefined): string;
  encodeFunctionData(functionFragment: "connext", values?: undefined): string;
  encodeFunctionData(functionFragment: "handler", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAllowedCaller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerByDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "sweepETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "xBundle",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "xBundleConnext",
    values: [BigNumberish[], BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xReceive",
    values: [BytesLike, BigNumberish, string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "HARVESTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HOUSE_KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REBALANCER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNPAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chief", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerByDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xBundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xBundleConnext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xReceive", data: BytesLike): Result;

  events: {
    "AllowCaller(address,bool)": EventFragment;
    "NewRouterAdded(address,uint256)": EventFragment;
    "XCalled(bytes32,address,address,uint256,address,uint256,bytes)": EventFragment;
    "XReceived(bytes32,uint256,bool,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowCaller"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRouterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XReceived"): EventFragment;
}

export interface AllowCallerEventObject {
  caller: string;
  allowed: boolean;
}
export type AllowCallerEvent = TypedEvent<
  [string, boolean],
  AllowCallerEventObject
>;

export type AllowCallerEventFilter = TypedEventFilter<AllowCallerEvent>;

export interface NewRouterAddedEventObject {
  router: string;
  domain: BigNumber;
}
export type NewRouterAddedEvent = TypedEvent<
  [string, BigNumber],
  NewRouterAddedEventObject
>;

export type NewRouterAddedEventFilter = TypedEventFilter<NewRouterAddedEvent>;

export interface XCalledEventObject {
  transferId: string;
  caller: string;
  receiver: string;
  destDomain: BigNumber;
  asset: string;
  amount: BigNumber;
  callData: string;
}
export type XCalledEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber, string],
  XCalledEventObject
>;

export type XCalledEventFilter = TypedEventFilter<XCalledEvent>;

export interface XReceivedEventObject {
  transferId: string;
  originDomain: BigNumber;
  success: boolean;
  asset: string;
  amount: BigNumber;
  callData: string;
}
export type XReceivedEvent = TypedEvent<
  [string, BigNumber, boolean, string, BigNumber, string],
  XReceivedEventObject
>;

export type XReceivedEventFilter = TypedEventFilter<XReceivedEvent>;

export interface ConnextRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnextRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HARVESTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WETH9(overrides?: CallOverrides): Promise<[string]>;

    allowCaller(
      caller: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bumpTransfer(
      transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chief(overrides?: CallOverrides): Promise<[string]>;

    connext(overrides?: CallOverrides): Promise<[string]>;

    handler(overrides?: CallOverrides): Promise<[string]>;

    isAllowedCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    routerByDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setRouter(
      domain: BigNumberish,
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepETH(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepToken(
      token: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xBundle(
      actions: BigNumberish[],
      args: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xBundleConnext(
      actions: BigNumberish[],
      args: BytesLike[],
      beforeSlipped: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xReceive(
      transferId: BytesLike,
      amount: BigNumberish,
      asset: string,
      originSender: string,
      originDomain: BigNumberish,
      callData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  HARVESTER_ROLE(overrides?: CallOverrides): Promise<string>;

  HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  REBALANCER_ROLE(overrides?: CallOverrides): Promise<string>;

  UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  WETH9(overrides?: CallOverrides): Promise<string>;

  allowCaller(
    caller: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bumpTransfer(
    transferId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chief(overrides?: CallOverrides): Promise<string>;

  connext(overrides?: CallOverrides): Promise<string>;

  handler(overrides?: CallOverrides): Promise<string>;

  isAllowedCaller(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  routerByDomain(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setRouter(
    domain: BigNumberish,
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepETH(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepToken(
    token: string,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xBundle(
    actions: BigNumberish[],
    args: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xBundleConnext(
    actions: BigNumberish[],
    args: BytesLike[],
    beforeSlipped: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xReceive(
    transferId: BytesLike,
    amount: BigNumberish,
    asset: string,
    originSender: string,
    originDomain: BigNumberish,
    callData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    HARVESTER_ROLE(overrides?: CallOverrides): Promise<string>;

    HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<string>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    WETH9(overrides?: CallOverrides): Promise<string>;

    allowCaller(
      caller: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    bumpTransfer(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    chief(overrides?: CallOverrides): Promise<string>;

    connext(overrides?: CallOverrides): Promise<string>;

    handler(overrides?: CallOverrides): Promise<string>;

    isAllowedCaller(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    routerByDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setRouter(
      domain: BigNumberish,
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepETH(receiver: string, overrides?: CallOverrides): Promise<void>;

    sweepToken(
      token: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xBundle(
      actions: BigNumberish[],
      args: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    xBundleConnext(
      actions: BigNumberish[],
      args: BytesLike[],
      beforeSlipped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    xReceive(
      transferId: BytesLike,
      amount: BigNumberish,
      asset: string,
      originSender: string,
      originDomain: BigNumberish,
      callData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AllowCaller(address,bool)"(
      caller?: null,
      allowed?: null
    ): AllowCallerEventFilter;
    AllowCaller(caller?: null, allowed?: null): AllowCallerEventFilter;

    "NewRouterAdded(address,uint256)"(
      router?: string | null,
      domain?: BigNumberish | null
    ): NewRouterAddedEventFilter;
    NewRouterAdded(
      router?: string | null,
      domain?: BigNumberish | null
    ): NewRouterAddedEventFilter;

    "XCalled(bytes32,address,address,uint256,address,uint256,bytes)"(
      transferId?: BytesLike | null,
      caller?: string | null,
      receiver?: string | null,
      destDomain?: null,
      asset?: null,
      amount?: null,
      callData?: null
    ): XCalledEventFilter;
    XCalled(
      transferId?: BytesLike | null,
      caller?: string | null,
      receiver?: string | null,
      destDomain?: null,
      asset?: null,
      amount?: null,
      callData?: null
    ): XCalledEventFilter;

    "XReceived(bytes32,uint256,bool,address,uint256,bytes)"(
      transferId?: BytesLike | null,
      originDomain?: BigNumberish | null,
      success?: null,
      asset?: null,
      amount?: null,
      callData?: null
    ): XReceivedEventFilter;
    XReceived(
      transferId?: BytesLike | null,
      originDomain?: BigNumberish | null,
      success?: null,
      asset?: null,
      amount?: null,
      callData?: null
    ): XReceivedEventFilter;
  };

  estimateGas: {
    HARVESTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WETH9(overrides?: CallOverrides): Promise<BigNumber>;

    allowCaller(
      caller: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bumpTransfer(
      transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chief(overrides?: CallOverrides): Promise<BigNumber>;

    connext(overrides?: CallOverrides): Promise<BigNumber>;

    handler(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerByDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRouter(
      domain: BigNumberish,
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepETH(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepToken(
      token: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xBundle(
      actions: BigNumberish[],
      args: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xBundleConnext(
      actions: BigNumberish[],
      args: BytesLike[],
      beforeSlipped: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xReceive(
      transferId: BytesLike,
      amount: BigNumberish,
      asset: string,
      originSender: string,
      originDomain: BigNumberish,
      callData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HARVESTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowCaller(
      caller: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bumpTransfer(
      transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chief(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowedCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerByDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRouter(
      domain: BigNumberish,
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepETH(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepToken(
      token: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xBundle(
      actions: BigNumberish[],
      args: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xBundleConnext(
      actions: BigNumberish[],
      args: BytesLike[],
      beforeSlipped: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xReceive(
      transferId: BytesLike,
      amount: BigNumberish,
      asset: string,
      originSender: string,
      originDomain: BigNumberish,
      callData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface ConnextRouterMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  HARVESTER_ROLE(overrides?: CallOverrides): Call<string>;

  HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Call<string>;

  LIQUIDATOR_ROLE(overrides?: CallOverrides): Call<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Call<string>;

  REBALANCER_ROLE(overrides?: CallOverrides): Call<string>;

  UNPAUSER_ROLE(overrides?: CallOverrides): Call<string>;

  WETH9(overrides?: CallOverrides): Call<string>;

  chief(overrides?: CallOverrides): Call<string>;

  connext(overrides?: CallOverrides): Call<string>;

  handler(overrides?: CallOverrides): Call<string>;

  isAllowedCaller(arg0: string, overrides?: CallOverrides): Call<boolean>;

  routerByDomain(arg0: BigNumberish, overrides?: CallOverrides): Call<string>;
}
