/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IEulerMarketsInterface extends utils.Interface {
  functions: {
    "activateMarket(address)": FunctionFragment;
    "dTokenToUnderlying(address)": FunctionFragment;
    "eTokenToDToken(address)": FunctionFragment;
    "eTokenToUnderlying(address)": FunctionFragment;
    "enterMarket(uint256,address)": FunctionFragment;
    "interestRate(address)": FunctionFragment;
    "underlyingToDToken(address)": FunctionFragment;
    "underlyingToEToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateMarket"
      | "dTokenToUnderlying"
      | "eTokenToDToken"
      | "eTokenToUnderlying"
      | "enterMarket"
      | "interestRate"
      | "underlyingToDToken"
      | "underlyingToEToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dTokenToUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eTokenToDToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eTokenToUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarket",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToDToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToEToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dTokenToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eTokenToDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eTokenToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToEToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IEulerMarkets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEulerMarketsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateMarket(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dTokenToUnderlying(
      dToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { underlying: string }>;

    eTokenToDToken(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { dTokenAddr: string }>;

    eTokenToUnderlying(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { underlying: string }>;

    enterMarket(
      subAccountId: BigNumberish,
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestRate(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingToDToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    underlyingToEToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  activateMarket(
    underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dTokenToUnderlying(
    dToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  eTokenToDToken(eToken: string, overrides?: CallOverrides): Promise<string>;

  eTokenToUnderlying(
    eToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  enterMarket(
    subAccountId: BigNumberish,
    newMarket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestRate(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingToDToken(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<string>;

  underlyingToEToken(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    activateMarket(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    dTokenToUnderlying(
      dToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    eTokenToDToken(eToken: string, overrides?: CallOverrides): Promise<string>;

    eTokenToUnderlying(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    enterMarket(
      subAccountId: BigNumberish,
      newMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRate(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToDToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    underlyingToEToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    activateMarket(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dTokenToUnderlying(
      dToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eTokenToDToken(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eTokenToUnderlying(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterMarket(
      subAccountId: BigNumberish,
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestRate(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToDToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToEToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateMarket(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dTokenToUnderlying(
      dToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eTokenToDToken(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eTokenToUnderlying(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterMarket(
      subAccountId: BigNumberish,
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestRate(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToDToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToEToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

export interface IEulerMarketsMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  dTokenToUnderlying(dToken: string, overrides?: CallOverrides): Call<string>;

  eTokenToDToken(eToken: string, overrides?: CallOverrides): Call<string>;

  eTokenToUnderlying(eToken: string, overrides?: CallOverrides): Call<string>;

  interestRate(underlying: string, overrides?: CallOverrides): Call<BigNumber>;

  underlyingToDToken(
    underlying: string,
    overrides?: CallOverrides
  ): Call<string>;

  underlyingToEToken(
    underlying: string,
    overrides?: CallOverrides
  ): Call<string>;
}
