/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  Fragment,
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IPausableVaultInterface extends utils.Interface {
  functions: {
    "pause(uint8)": FunctionFragment;
    "pauseForceAll()": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "unpause(uint8)": FunctionFragment;
    "unpauseForceAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "pause"
      | "pauseForceAll"
      | "paused"
      | "unpause"
      | "unpauseForceAll"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "pauseForceAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseForceAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseForceAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseForceAll",
    data: BytesLike
  ): Result;

  events: {
    "Paused(address,uint8)": EventFragment;
    "PausedForceAll(address)": EventFragment;
    "Unpaused(address,uint8)": EventFragment;
    "UnpausedForceAll(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedForceAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpausedForceAll"): EventFragment;
}

export interface PausedEventObject {
  account: string;
  actions: number;
}
export type PausedEvent = TypedEvent<[string, number], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PausedForceAllEventObject {
  account: string;
}
export type PausedForceAllEvent = TypedEvent<
  [string],
  PausedForceAllEventObject
>;

export type PausedForceAllEventFilter = TypedEventFilter<PausedForceAllEvent>;

export interface UnpausedEventObject {
  account: string;
  actions: number;
}
export type UnpausedEvent = TypedEvent<[string, number], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnpausedForceAllEventObject {
  account: string;
}
export type UnpausedForceAllEvent = TypedEvent<
  [string],
  UnpausedForceAllEventObject
>;

export type UnpausedForceAllEventFilter =
  TypedEventFilter<UnpausedForceAllEvent>;

export interface IPausableVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPausableVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(action: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  pause(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseForceAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(action: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  unpause(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseForceAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    pause(action: BigNumberish, overrides?: CallOverrides): Promise<void>;

    pauseForceAll(overrides?: CallOverrides): Promise<void>;

    paused(action: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    unpause(action: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unpauseForceAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Paused(address,uint8)"(account?: null, actions?: null): PausedEventFilter;
    Paused(account?: null, actions?: null): PausedEventFilter;

    "PausedForceAll(address)"(account?: null): PausedForceAllEventFilter;
    PausedForceAll(account?: null): PausedForceAllEventFilter;

    "Unpaused(address,uint8)"(
      account?: null,
      actions?: null
    ): UnpausedEventFilter;
    Unpaused(account?: null, actions?: null): UnpausedEventFilter;

    "UnpausedForceAll(address)"(account?: null): UnpausedForceAllEventFilter;
    UnpausedForceAll(account?: null): UnpausedForceAllEventFilter;
  };

  estimateGas: {
    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(action: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(
      action: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface IPausableVaultMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  paused(action: BigNumberish, overrides?: CallOverrides): Call<boolean>;
}
