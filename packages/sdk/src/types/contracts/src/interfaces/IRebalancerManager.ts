/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  Fragment,
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";

import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IRebalancerManagerInterface extends utils.Interface {
  functions: {
    "allowExecutor(address,bool)": FunctionFragment;
    "completeRebalance(address,uint256,uint256,address,address,address,bool)": FunctionFragment;
    "rebalanceVault(address,uint256,uint256,address,address,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowExecutor"
      | "completeRebalance"
      | "rebalanceVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowExecutor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "completeRebalance",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceVault",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceVault",
    data: BytesLike
  ): Result;

  events: {
    "AllowExecutor(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowExecutor"): EventFragment;
}

export interface AllowExecutorEventObject {
  executor: string;
  allowed: boolean;
}
export type AllowExecutorEvent = TypedEvent<
  [string, boolean],
  AllowExecutorEventObject
>;

export type AllowExecutorEventFilter = TypedEventFilter<AllowExecutorEvent>;

export interface IRebalancerManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRebalancerManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowExecutor(
      executor: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeRebalance(
      vault: string,
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      flasher: string,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalanceVault(
      vault: string,
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      flasher: string,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowExecutor(
    executor: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeRebalance(
    vault: string,
    assets: BigNumberish,
    debt: BigNumberish,
    from: string,
    to: string,
    flasher: string,
    setToAsActiveProvider: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalanceVault(
    vault: string,
    assets: BigNumberish,
    debt: BigNumberish,
    from: string,
    to: string,
    flasher: string,
    setToAsActiveProvider: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowExecutor(
      executor: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    completeRebalance(
      vault: string,
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      flasher: string,
      setToAsActiveProvider: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rebalanceVault(
      vault: string,
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      flasher: string,
      setToAsActiveProvider: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AllowExecutor(address,bool)"(
      executor?: string | null,
      allowed?: null
    ): AllowExecutorEventFilter;
    AllowExecutor(
      executor?: string | null,
      allowed?: null
    ): AllowExecutorEventFilter;
  };

  estimateGas: {
    allowExecutor(
      executor: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeRebalance(
      vault: string,
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      flasher: string,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalanceVault(
      vault: string,
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      flasher: string,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowExecutor(
      executor: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeRebalance(
      vault: string,
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      flasher: string,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceVault(
      vault: string,
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      flasher: string,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface IRebalancerManagerMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];
}
