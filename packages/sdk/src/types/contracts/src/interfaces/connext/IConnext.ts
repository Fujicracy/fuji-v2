/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IConnext {
  export type CallParamsStruct = {
    to: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
    originDomain: PromiseOrValue<BigNumberish>;
    destinationDomain: PromiseOrValue<BigNumberish>;
    agent: PromiseOrValue<string>;
    recovery: PromiseOrValue<string>;
    forceSlow: PromiseOrValue<boolean>;
    receiveLocal: PromiseOrValue<boolean>;
    callback: PromiseOrValue<string>;
    callbackFee: PromiseOrValue<BigNumberish>;
    relayerFee: PromiseOrValue<BigNumberish>;
    slippageTol: PromiseOrValue<BigNumberish>;
  };

  export type CallParamsStructOutput = [
    string,
    string,
    number,
    number,
    string,
    string,
    boolean,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    to: string;
    callData: string;
    originDomain: number;
    destinationDomain: number;
    agent: string;
    recovery: string;
    forceSlow: boolean;
    receiveLocal: boolean;
    callback: string;
    callbackFee: BigNumber;
    relayerFee: BigNumber;
    slippageTol: BigNumber;
  };

  export type XCallArgsStruct = {
    params: IConnext.CallParamsStruct;
    transactingAssetId: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type XCallArgsStructOutput = [
    IConnext.CallParamsStructOutput,
    string,
    BigNumber
  ] & {
    params: IConnext.CallParamsStructOutput;
    transactingAssetId: string;
    amount: BigNumber;
  };
}

export interface IConnextInterface extends utils.Interface {
  functions: {
    "xcall(((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,uint256))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "xcall"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "xcall",
    values: [IConnext.XCallArgsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "xcall", data: BytesLike): Result;

  events: {};
}

export interface IConnext extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConnextInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  xcall(
    _args: IConnext.XCallArgsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
