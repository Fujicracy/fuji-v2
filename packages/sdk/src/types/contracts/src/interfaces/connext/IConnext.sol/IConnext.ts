/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";

import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export type TransferInfoStruct = {
  originDomain: BigNumberish;
  destinationDomain: BigNumberish;
  canonicalDomain: BigNumberish;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: BytesLike;
  slippage: BigNumberish;
  originSender: string;
  bridgedAmt: BigNumberish;
  normalizedIn: BigNumberish;
  nonce: BigNumberish;
  canonicalId: BytesLike;
};

export type TransferInfoStructOutput = [
  number,
  number,
  number,
  string,
  string,
  boolean,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  originDomain: number;
  destinationDomain: number;
  canonicalDomain: number;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: string;
  slippage: BigNumber;
  originSender: string;
  bridgedAmt: BigNumber;
  normalizedIn: BigNumber;
  nonce: BigNumber;
  canonicalId: string;
};

export type ExecuteArgsStruct = {
  params: TransferInfoStruct;
  routers: string[];
  routerSignatures: BytesLike[];
  sequencer: string;
  sequencerSignature: BytesLike;
};

export type ExecuteArgsStructOutput = [
  TransferInfoStructOutput,
  string[],
  string[],
  string,
  string
] & {
  params: TransferInfoStructOutput;
  routers: string[];
  routerSignatures: string[];
  sequencer: string;
  sequencerSignature: string;
};

export interface IConnextInterface extends utils.Interface {
  functions: {
    "bumpTransfer(bytes32)": FunctionFragment;
    "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))": FunctionFragment;
    "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)": FunctionFragment;
    "xcall(uint32,address,address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bumpTransfer"
      | "execute"
      | "forceUpdateSlippage"
      | "xcall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bumpTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ExecuteArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forceUpdateSlippage",
    values: [TransferInfoStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xcall",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "bumpTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceUpdateSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xcall", data: BytesLike): Result;

  events: {};
}

export interface IConnext extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConnextInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bumpTransfer(
      transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xcall(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bumpTransfer(
    transferId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _args: ExecuteArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceUpdateSlippage(
    _params: TransferInfoStruct,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xcall(
    _destination: BigNumberish,
    _to: string,
    _asset: string,
    _delegate: string,
    _amount: BigNumberish,
    _slippage: BigNumberish,
    _callData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bumpTransfer(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    xcall(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bumpTransfer(
      transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xcall(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bumpTransfer(
      transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xcall(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface IConnextMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];
}
