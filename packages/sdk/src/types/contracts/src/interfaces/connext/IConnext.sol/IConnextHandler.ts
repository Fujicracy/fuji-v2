/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export type CallParamsStruct = {
  to: string;
  callData: BytesLike;
  originDomain: BigNumberish;
  destinationDomain: BigNumberish;
  agent: string;
  recovery: string;
  forceSlow: boolean;
  receiveLocal: boolean;
  callback: string;
  callbackFee: BigNumberish;
  relayerFee: BigNumberish;
  destinationMinOut: BigNumberish;
};

export type CallParamsStructOutput = [
  string,
  string,
  number,
  number,
  string,
  string,
  boolean,
  boolean,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  to: string;
  callData: string;
  originDomain: number;
  destinationDomain: number;
  agent: string;
  recovery: string;
  forceSlow: boolean;
  receiveLocal: boolean;
  callback: string;
  callbackFee: BigNumber;
  relayerFee: BigNumber;
  destinationMinOut: BigNumber;
};

export type XCallArgsStruct = {
  params: CallParamsStruct;
  transactingAsset: string;
  transactingAmount: BigNumberish;
  originMinOut: BigNumberish;
};

export type XCallArgsStructOutput = [
  CallParamsStructOutput,
  string,
  BigNumber,
  BigNumber
] & {
  params: CallParamsStructOutput;
  transactingAsset: string;
  transactingAmount: BigNumber;
  originMinOut: BigNumber;
};

export interface IConnextHandlerInterface extends utils.Interface {
  functions: {
    "domain()": FunctionFragment;
    "executor()": FunctionFragment;
    "xcall(((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "domain" | "executor" | "xcall"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xcall",
    values: [XCallArgsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xcall", data: BytesLike): Result;

  events: {};
}

export interface IConnextHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConnextHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    domain(overrides?: CallOverrides): Promise<[BigNumber]>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    xcall(
      _args: XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  domain(overrides?: CallOverrides): Promise<BigNumber>;

  executor(overrides?: CallOverrides): Promise<string>;

  xcall(
    _args: XCallArgsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    domain(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<string>;

    xcall(_args: XCallArgsStruct, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    domain(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    xcall(
      _args: XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xcall(
      _args: XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface IConnextHandlerMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  domain(overrides?: CallOverrides): Call<BigNumber>;

  executor(overrides?: CallOverrides): Call<string>;
}
