/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IVelodromeRouterInterface extends utils.Interface {
  functions: {
    "quoteRemoveLiquidity(address,address,bool,uint256)": FunctionFragment;
    "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "quoteRemoveLiquidity"
      | "swapExactTokensForTokensSimple"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "quoteRemoveLiquidity",
    values: [string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSimple",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      boolean,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "quoteRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSimple",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVelodromeRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVelodromeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    quoteRemoveLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    swapExactTokensForTokensSimple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      stable: boolean,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  quoteRemoveLiquidity(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  swapExactTokensForTokensSimple(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    tokenFrom: string,
    tokenTo: string,
    stable: boolean,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    quoteRemoveLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    swapExactTokensForTokensSimple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      stable: boolean,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    quoteRemoveLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTokensForTokensSimple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      stable: boolean,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    quoteRemoveLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSimple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      stable: boolean,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export interface IVelodromeRouterMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  quoteRemoveLiquidity(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Call<[BigNumber, BigNumber]>;
}
