/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IBeefyUniV2ZapVelodromeInterface extends utils.Interface {
  functions: {
    "beefIn(address,uint256,address,uint256)": FunctionFragment;
    "beefOutAndSwap(address,uint256,address,uint256)": FunctionFragment;
    "estimateSwap(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "beefIn" | "beefOutAndSwap" | "estimateSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beefIn",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beefOutAndSwap",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSwap",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "beefIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beefOutAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSwap",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBeefyUniV2ZapVelodrome extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBeefyUniV2ZapVelodromeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beefIn(
      beefyVault: string,
      tokenAmountOutMin: BigNumberish,
      tokenIn: string,
      tokenInAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beefOutAndSwap(
      beefyVault: string,
      withdrawAmount: BigNumberish,
      desiredToken: string,
      desiredTokenOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateSwap(
      beefyVault: string,
      tokenIn: string,
      fullInvestmentIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        swapAmountIn: BigNumber;
        swapAmountOut: BigNumber;
        swapTokenOut: string;
      }
    >;
  };

  beefIn(
    beefyVault: string,
    tokenAmountOutMin: BigNumberish,
    tokenIn: string,
    tokenInAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beefOutAndSwap(
    beefyVault: string,
    withdrawAmount: BigNumberish,
    desiredToken: string,
    desiredTokenOutMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateSwap(
    beefyVault: string,
    tokenIn: string,
    fullInvestmentIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      swapAmountIn: BigNumber;
      swapAmountOut: BigNumber;
      swapTokenOut: string;
    }
  >;

  callStatic: {
    beefIn(
      beefyVault: string,
      tokenAmountOutMin: BigNumberish,
      tokenIn: string,
      tokenInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beefOutAndSwap(
      beefyVault: string,
      withdrawAmount: BigNumberish,
      desiredToken: string,
      desiredTokenOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    estimateSwap(
      beefyVault: string,
      tokenIn: string,
      fullInvestmentIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        swapAmountIn: BigNumber;
        swapAmountOut: BigNumber;
        swapTokenOut: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    beefIn(
      beefyVault: string,
      tokenAmountOutMin: BigNumberish,
      tokenIn: string,
      tokenInAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beefOutAndSwap(
      beefyVault: string,
      withdrawAmount: BigNumberish,
      desiredToken: string,
      desiredTokenOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateSwap(
      beefyVault: string,
      tokenIn: string,
      fullInvestmentIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beefIn(
      beefyVault: string,
      tokenAmountOutMin: BigNumberish,
      tokenIn: string,
      tokenInAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beefOutAndSwap(
      beefyVault: string,
      withdrawAmount: BigNumberish,
      desiredToken: string,
      desiredTokenOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateSwap(
      beefyVault: string,
      tokenIn: string,
      fullInvestmentIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

export interface IBeefyUniV2ZapVelodromeMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  estimateSwap(
    beefyVault: string,
    tokenIn: string,
    fullInvestmentIn: BigNumberish,
    overrides?: CallOverrides
  ): Call<
    [BigNumber, BigNumber, string] & {
      swapAmountIn: BigNumber;
      swapAmountOut: BigNumber;
      swapTokenOut: string;
    }
  >;
}
