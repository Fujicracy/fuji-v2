/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFujiOracleInterface extends utils.Interface {
  functions: {
    "getPriceOf(address,address,uint8)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getPriceOf"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPriceOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getPriceOf", data: BytesLike): Result;

  events: {
    "AssetPriceFeedChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetPriceFeedChanged"): EventFragment;
}

export interface AssetPriceFeedChangedEventObject {
  asset: string;
  newPriceFeedAddress: string;
}
export type AssetPriceFeedChangedEvent = TypedEvent<
  [string, string],
  AssetPriceFeedChangedEventObject
>;

export type AssetPriceFeedChangedEventFilter =
  TypedEventFilter<AssetPriceFeedChangedEvent>;

export interface IFujiOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFujiOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPriceOf(
      _collateralAsset: PromiseOrValue<string>,
      _borrowAsset: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getPriceOf(
    _collateralAsset: PromiseOrValue<string>,
    _borrowAsset: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getPriceOf(
      _collateralAsset: PromiseOrValue<string>,
      _borrowAsset: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AssetPriceFeedChanged(address,address)"(
      asset?: null,
      newPriceFeedAddress?: null
    ): AssetPriceFeedChangedEventFilter;
    AssetPriceFeedChanged(
      asset?: null,
      newPriceFeedAddress?: null
    ): AssetPriceFeedChangedEventFilter;
  };

  estimateGas: {
    getPriceOf(
      _collateralAsset: PromiseOrValue<string>,
      _borrowAsset: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPriceOf(
      _collateralAsset: PromiseOrValue<string>,
      _borrowAsset: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
