/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  Fragment,
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface BorrowingVaultInterface extends utils.Interface {
  functions: {
    "DEFAULT_LIQUIDATION_CLOSE_FACTOR()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "FULL_LIQUIDATION_THRESHOLD()": FunctionFragment;
    "HARVESTER_ROLE()": FunctionFragment;
    "HOUSE_KEEPER_ROLE()": FunctionFragment;
    "LIQUIDATION_PENALTY()": FunctionFragment;
    "LIQUIDATOR_ROLE()": FunctionFragment;
    "MAX_LIQUIDATION_CLOSE_FACTOR()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "REBALANCER_ROLE()": FunctionFragment;
    "UNPAUSER_ROLE()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "activeProvider()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAsset(address)": FunctionFragment;
    "balanceOfDebt(address)": FunctionFragment;
    "balanceOfDebtShares(address)": FunctionFragment;
    "borrow(uint256,address,address,uint256)": FunctionFragment;
    "borrow(uint256,address,address)": FunctionFragment;
    "borrowAllowance(address,address,address)": FunctionFragment;
    "chief()": FunctionFragment;
    "convertDebtToShares(uint256)": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToDebt(uint256)": FunctionFragment;
    "convertToShares(uint256)": FunctionFragment;
    "debtAsset()": FunctionFragment;
    "debtDecimals()": FunctionFragment;
    "debtSharesSupply()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "decreaseBorrowAllowance(address,address,uint256)": FunctionFragment;
    "decreaseWithdrawAllowance(address,address,uint256)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "deposit(uint256,address,uint256)": FunctionFragment;
    "depositCap()": FunctionFragment;
    "getHealthFactor(address)": FunctionFragment;
    "getLiquidationFactor(address)": FunctionFragment;
    "getProviders()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "increaseBorrowAllowance(address,address,uint256)": FunctionFragment;
    "increaseWithdrawAllowance(address,address,uint256)": FunctionFragment;
    "liqRatio()": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "maxBorrow(address)": FunctionFragment;
    "maxDeposit(address)": FunctionFragment;
    "maxLtv()": FunctionFragment;
    "maxMint(address)": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "minAmount()": FunctionFragment;
    "mint(uint256,address,uint256)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pause(uint8)": FunctionFragment;
    "pauseForceAll()": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "payback(uint256,address,uint256)": FunctionFragment;
    "payback(uint256,address)": FunctionFragment;
    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "permitWithdraw(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewMint(uint256)": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "rebalance(uint256,uint256,address,address,uint256,bool)": FunctionFragment;
    "redeem(uint256,address,address,uint256)": FunctionFragment;
    "redeem(uint256,address,address)": FunctionFragment;
    "setActiveProvider(address)": FunctionFragment;
    "setDepositCap(uint256)": FunctionFragment;
    "setLiqRatio(uint256)": FunctionFragment;
    "setMaxLtv(uint256)": FunctionFragment;
    "setMinAmount(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setProviders(address[])": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpause(uint8)": FunctionFragment;
    "unpauseForceAll()": FunctionFragment;
    "withdraw(uint256,address,address,uint256)": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
    "withdrawAllowance(address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_LIQUIDATION_CLOSE_FACTOR"
      | "DOMAIN_SEPARATOR"
      | "FULL_LIQUIDATION_THRESHOLD"
      | "HARVESTER_ROLE"
      | "HOUSE_KEEPER_ROLE"
      | "LIQUIDATION_PENALTY"
      | "LIQUIDATOR_ROLE"
      | "MAX_LIQUIDATION_CLOSE_FACTOR"
      | "PAUSER_ROLE"
      | "REBALANCER_ROLE"
      | "UNPAUSER_ROLE"
      | "VERSION"
      | "activeProvider"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "balanceOfAsset"
      | "balanceOfDebt"
      | "balanceOfDebtShares"
      | "borrow(uint256,address,address,uint256)"
      | "borrow(uint256,address,address)"
      | "borrowAllowance"
      | "chief"
      | "convertDebtToShares"
      | "convertToAssets"
      | "convertToDebt"
      | "convertToShares"
      | "debtAsset"
      | "debtDecimals"
      | "debtSharesSupply"
      | "decimals"
      | "decreaseAllowance"
      | "decreaseBorrowAllowance"
      | "decreaseWithdrawAllowance"
      | "deposit(uint256,address)"
      | "deposit(uint256,address,uint256)"
      | "depositCap"
      | "getHealthFactor"
      | "getLiquidationFactor"
      | "getProviders"
      | "increaseAllowance"
      | "increaseBorrowAllowance"
      | "increaseWithdrawAllowance"
      | "liqRatio"
      | "liquidate"
      | "maxBorrow"
      | "maxDeposit"
      | "maxLtv"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "minAmount"
      | "mint(uint256,address,uint256)"
      | "mint(uint256,address)"
      | "name"
      | "nonces"
      | "oracle"
      | "pause"
      | "pauseForceAll"
      | "paused"
      | "payback(uint256,address,uint256)"
      | "payback(uint256,address)"
      | "permitBorrow"
      | "permitWithdraw"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "rebalance"
      | "redeem(uint256,address,address,uint256)"
      | "redeem(uint256,address,address)"
      | "setActiveProvider"
      | "setDepositCap"
      | "setLiqRatio"
      | "setMaxLtv"
      | "setMinAmount"
      | "setOracle"
      | "setProviders"
      | "symbol"
      | "totalAssets"
      | "totalDebt"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
      | "unpauseForceAll"
      | "withdraw(uint256,address,address,uint256)"
      | "withdraw(uint256,address,address)"
      | "withdrawAllowance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_LIQUIDATION_CLOSE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FULL_LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HARVESTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HOUSE_KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LIQUIDATION_CLOSE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REBALANCER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNPAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfDebt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfDebtShares",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(uint256,address,address,uint256)",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAllowance",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "chief", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertDebtToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debtAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtSharesSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBorrowAllowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseWithdrawAllowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address,uint256)",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBorrowAllowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseWithdrawAllowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "liqRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "maxBorrow", values: [string]): string;
  encodeFunctionData(functionFragment: "maxDeposit", values: [string]): string;
  encodeFunctionData(functionFragment: "maxLtv", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxMint", values: [string]): string;
  encodeFunctionData(functionFragment: "maxRedeem", values: [string]): string;
  encodeFunctionData(functionFragment: "maxWithdraw", values: [string]): string;
  encodeFunctionData(functionFragment: "minAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address,uint256)",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "pauseForceAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payback(uint256,address,uint256)",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payback(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "permitBorrow",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitWithdraw",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [BigNumberish, BigNumberish, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256,address,address,uint256)",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiqRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLtv",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProviders",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseForceAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,address,address,uint256)",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowance",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_LIQUIDATION_CLOSE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FULL_LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HARVESTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HOUSE_KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LIQUIDATION_CLOSE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REBALANCER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNPAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfDebtShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrow(uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrow(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chief", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertDebtToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtSharesSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBorrowAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseWithdrawAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBorrowAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseWithdrawAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liqRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxBorrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxLtv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseForceAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payback(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payback(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiqRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxLtv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseForceAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowance",
    data: BytesLike
  ): Result;

  events: {
    "ActiveProviderChanged(address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(address,address,address,uint256,uint256)": EventFragment;
    "BorrowApproval(address,address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "DepositCapChanged(uint256)": EventFragment;
    "LiqRatioChanged(uint256)": EventFragment;
    "Liquidate(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "MaxLtvChanged(uint256)": EventFragment;
    "MinAmountChanged(uint256)": EventFragment;
    "OracleChanged(address)": EventFragment;
    "Paused(address,uint8)": EventFragment;
    "PausedForceAll(address)": EventFragment;
    "Payback(address,address,uint256,uint256)": EventFragment;
    "ProvidersChanged(address[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address,uint8)": EventFragment;
    "UnpausedForceAll(address)": EventFragment;
    "VaultRebalance(uint256,uint256,address,address)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawApproval(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActiveProviderChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiqRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxLtvChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinAmountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedForceAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpausedForceAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawApproval"): EventFragment;
}

export interface ActiveProviderChangedEventObject {
  newActiveProvider: string;
}
export type ActiveProviderChangedEvent = TypedEvent<
  [string],
  ActiveProviderChangedEventObject
>;

export type ActiveProviderChangedEventFilter =
  TypedEventFilter<ActiveProviderChangedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowEventObject {
  sender: string;
  receiver: string;
  owner: string;
  debt: BigNumber;
  shares: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface BorrowApprovalEventObject {
  owner: string;
  operator: string;
  receiver: string;
  amount: BigNumber;
}
export type BorrowApprovalEvent = TypedEvent<
  [string, string, string, BigNumber],
  BorrowApprovalEventObject
>;

export type BorrowApprovalEventFilter = TypedEventFilter<BorrowApprovalEvent>;

export interface DepositEventObject {
  sender: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositCapChangedEventObject {
  newDepositCap: BigNumber;
}
export type DepositCapChangedEvent = TypedEvent<
  [BigNumber],
  DepositCapChangedEventObject
>;

export type DepositCapChangedEventFilter =
  TypedEventFilter<DepositCapChangedEvent>;

export interface LiqRatioChangedEventObject {
  newLiqRatio: BigNumber;
}
export type LiqRatioChangedEvent = TypedEvent<
  [BigNumber],
  LiqRatioChangedEventObject
>;

export type LiqRatioChangedEventFilter = TypedEventFilter<LiqRatioChangedEvent>;

export interface LiquidateEventObject {
  caller: string;
  receiver: string;
  owner: string;
  collateralSold: BigNumber;
  debtPaid: BigNumber;
  price: BigNumber;
  liquidationFactor: BigNumber;
}
export type LiquidateEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface MaxLtvChangedEventObject {
  newMaxLtv: BigNumber;
}
export type MaxLtvChangedEvent = TypedEvent<
  [BigNumber],
  MaxLtvChangedEventObject
>;

export type MaxLtvChangedEventFilter = TypedEventFilter<MaxLtvChangedEvent>;

export interface MinAmountChangedEventObject {
  newMinAmount: BigNumber;
}
export type MinAmountChangedEvent = TypedEvent<
  [BigNumber],
  MinAmountChangedEventObject
>;

export type MinAmountChangedEventFilter =
  TypedEventFilter<MinAmountChangedEvent>;

export interface OracleChangedEventObject {
  newOracle: string;
}
export type OracleChangedEvent = TypedEvent<[string], OracleChangedEventObject>;

export type OracleChangedEventFilter = TypedEventFilter<OracleChangedEvent>;

export interface PausedEventObject {
  account: string;
  action: number;
}
export type PausedEvent = TypedEvent<[string, number], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PausedForceAllEventObject {
  account: string;
}
export type PausedForceAllEvent = TypedEvent<
  [string],
  PausedForceAllEventObject
>;

export type PausedForceAllEventFilter = TypedEventFilter<PausedForceAllEvent>;

export interface PaybackEventObject {
  sender: string;
  owner: string;
  debt: BigNumber;
  shares: BigNumber;
}
export type PaybackEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  PaybackEventObject
>;

export type PaybackEventFilter = TypedEventFilter<PaybackEvent>;

export interface ProvidersChangedEventObject {
  newProviders: string[];
}
export type ProvidersChangedEvent = TypedEvent<
  [string[]],
  ProvidersChangedEventObject
>;

export type ProvidersChangedEventFilter =
  TypedEventFilter<ProvidersChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
  action: number;
}
export type UnpausedEvent = TypedEvent<[string, number], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnpausedForceAllEventObject {
  account: string;
}
export type UnpausedForceAllEvent = TypedEvent<
  [string],
  UnpausedForceAllEventObject
>;

export type UnpausedForceAllEventFilter =
  TypedEventFilter<UnpausedForceAllEvent>;

export interface VaultRebalanceEventObject {
  assets: BigNumber;
  debt: BigNumber;
  from: string;
  to: string;
}
export type VaultRebalanceEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  VaultRebalanceEventObject
>;

export type VaultRebalanceEventFilter = TypedEventFilter<VaultRebalanceEvent>;

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawApprovalEventObject {
  owner: string;
  operator: string;
  receiver: string;
  amount: BigNumber;
}
export type WithdrawApprovalEvent = TypedEvent<
  [string, string, string, BigNumber],
  WithdrawApprovalEventObject
>;

export type WithdrawApprovalEventFilter =
  TypedEventFilter<WithdrawApprovalEvent>;

export interface BorrowingVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BorrowingVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    FULL_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    HARVESTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATION_PENALTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    activeProvider(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAsset(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    balanceOfDebt(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debt: BigNumber }>;

    balanceOfDebtShares(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debtShares: BigNumber }>;

    "borrow(uint256,address,address,uint256)"(
      debt: BigNumberish,
      receiver: string,
      owner: string,
      maxDebtShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256,address,address)"(
      debt: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowAllowance(
      owner: string,
      operator: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    chief(overrides?: CallOverrides): Promise<[string]>;

    convertDebtToShares(
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToDebt(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debt: BigNumber }>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    debtAsset(overrides?: CallOverrides): Promise<[string]>;

    debtDecimals(overrides?: CallOverrides): Promise<[number]>;

    debtSharesSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseBorrowAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseWithdrawAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address,uint256)"(
      assets: BigNumberish,
      receiver: string,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHealthFactor(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { healthFactor: BigNumber }>;

    getLiquidationFactor(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidationFactor: BigNumber }>;

    getProviders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { list: string[] }>;

    increaseAllowance(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseBorrowAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseWithdrawAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liqRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      owner: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxBorrow(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLtv(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mint(uint256,address,uint256)"(
      shares: BigNumberish,
      receiver: string,
      maxAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(action: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    "payback(uint256,address,uint256)"(
      debt: BigNumberish,
      owner: string,
      minDebtShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "payback(uint256,address)"(
      debt: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permitBorrow(
      owner: string,
      receiver: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permitWithdraw(
      owner: string,
      receiver: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rebalance(
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      fee: BigNumberish,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(uint256,address,address,uint256)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      minAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setActiveProvider(
      activeProvider_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiqRatio(
      liqRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLtv(
      maxLtv_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProviders(
      providers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,address,uint256)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      maxShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllowance(
      owner: string,
      operator: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT_LIQUIDATION_CLOSE_FACTOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  FULL_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  HARVESTER_ROLE(overrides?: CallOverrides): Promise<string>;

  HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  LIQUIDATION_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_LIQUIDATION_CLOSE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  REBALANCER_ROLE(overrides?: CallOverrides): Promise<string>;

  UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  activeProvider(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    receiver: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    receiver: string,
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAsset(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfDebt(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfDebtShares(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrow(uint256,address,address,uint256)"(
    debt: BigNumberish,
    receiver: string,
    owner: string,
    maxDebtShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256,address,address)"(
    debt: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowAllowance(
    owner: string,
    operator: string,
    receiver: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chief(overrides?: CallOverrides): Promise<string>;

  convertDebtToShares(
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToAssets(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToDebt(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtAsset(overrides?: CallOverrides): Promise<string>;

  debtDecimals(overrides?: CallOverrides): Promise<number>;

  debtSharesSupply(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    receiver: string,
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseBorrowAllowance(
    operator: string,
    receiver: string,
    byAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseWithdrawAllowance(
    operator: string,
    receiver: string,
    byAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address,uint256)"(
    assets: BigNumberish,
    receiver: string,
    minShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  getHealthFactor(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidationFactor(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProviders(overrides?: CallOverrides): Promise<string[]>;

  increaseAllowance(
    receiver: string,
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseBorrowAllowance(
    operator: string,
    receiver: string,
    byAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseWithdrawAllowance(
    operator: string,
    receiver: string,
    byAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liqRatio(overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    owner: string,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxBorrow(borrower: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxLtv(overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  minAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "mint(uint256,address,uint256)"(
    shares: BigNumberish,
    receiver: string,
    maxAssets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(uint256,address)"(
    shares: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pause(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseForceAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(action: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "payback(uint256,address,uint256)"(
    debt: BigNumberish,
    owner: string,
    minDebtShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "payback(uint256,address)"(
    debt: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permitBorrow(
    owner: string,
    receiver: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permitWithdraw(
    owner: string,
    receiver: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  previewDeposit(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebalance(
    assets: BigNumberish,
    debt: BigNumberish,
    from: string,
    to: string,
    fee: BigNumberish,
    setToAsActiveProvider: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(uint256,address,address,uint256)"(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    minAssets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(uint256,address,address)"(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setActiveProvider(
    activeProvider_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositCap(
    newCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiqRatio(
    liqRatio_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLtv(
    maxLtv_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProviders(
    providers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseForceAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,address,uint256)"(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    maxShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,address)"(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllowance(
    owner: string,
    operator: string,
    receiver: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    FULL_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    HARVESTER_ROLE(overrides?: CallOverrides): Promise<string>;

    HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    LIQUIDATION_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_LIQUIDATION_CLOSE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<string>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    activeProvider(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      receiver: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAsset(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfDebt(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfDebtShares(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(uint256,address,address,uint256)"(
      debt: BigNumberish,
      receiver: string,
      owner: string,
      maxDebtShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(uint256,address,address)"(
      debt: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowAllowance(
      owner: string,
      operator: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chief(overrides?: CallOverrides): Promise<string>;

    convertDebtToShares(
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToDebt(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtAsset(overrides?: CallOverrides): Promise<string>;

    debtDecimals(overrides?: CallOverrides): Promise<number>;

    debtSharesSupply(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      receiver: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseBorrowAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseWithdrawAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,address,uint256)"(
      assets: BigNumberish,
      receiver: string,
      minShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    getHealthFactor(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationFactor(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviders(overrides?: CallOverrides): Promise<string[]>;

    increaseAllowance(
      receiver: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseBorrowAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseWithdrawAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liqRatio(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      owner: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBorrow(borrower: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxLtv(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "mint(uint256,address,uint256)"(
      shares: BigNumberish,
      receiver: string,
      maxAssets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pause(action: BigNumberish, overrides?: CallOverrides): Promise<void>;

    pauseForceAll(overrides?: CallOverrides): Promise<void>;

    paused(action: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "payback(uint256,address,uint256)"(
      debt: BigNumberish,
      owner: string,
      minDebtShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "payback(uint256,address)"(
      debt: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitBorrow(
      owner: string,
      receiver: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    permitWithdraw(
      owner: string,
      receiver: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      fee: BigNumberish,
      setToAsActiveProvider: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "redeem(uint256,address,address,uint256)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      minAssets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setActiveProvider(
      activeProvider_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositCap(
      newCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiqRatio(
      liqRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLtv(maxLtv_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMinAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(newOracle: string, overrides?: CallOverrides): Promise<void>;

    setProviders(providers: string[], overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(action: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unpauseForceAll(overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256,address,address,uint256)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      maxShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAllowance(
      owner: string,
      operator: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ActiveProviderChanged(address)"(
      newActiveProvider?: null
    ): ActiveProviderChangedEventFilter;
    ActiveProviderChanged(
      newActiveProvider?: null
    ): ActiveProviderChangedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Borrow(address,address,address,uint256,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      debt?: null,
      shares?: null
    ): BorrowEventFilter;
    Borrow(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      debt?: null,
      shares?: null
    ): BorrowEventFilter;

    "BorrowApproval(address,address,address,uint256)"(
      owner?: string | null,
      operator?: null,
      receiver?: null,
      amount?: null
    ): BorrowApprovalEventFilter;
    BorrowApproval(
      owner?: string | null,
      operator?: null,
      receiver?: null,
      amount?: null
    ): BorrowApprovalEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    "DepositCapChanged(uint256)"(
      newDepositCap?: null
    ): DepositCapChangedEventFilter;
    DepositCapChanged(newDepositCap?: null): DepositCapChangedEventFilter;

    "LiqRatioChanged(uint256)"(newLiqRatio?: null): LiqRatioChangedEventFilter;
    LiqRatioChanged(newLiqRatio?: null): LiqRatioChangedEventFilter;

    "Liquidate(address,address,address,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      collateralSold?: null,
      debtPaid?: null,
      price?: null,
      liquidationFactor?: null
    ): LiquidateEventFilter;
    Liquidate(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      collateralSold?: null,
      debtPaid?: null,
      price?: null,
      liquidationFactor?: null
    ): LiquidateEventFilter;

    "MaxLtvChanged(uint256)"(newMaxLtv?: null): MaxLtvChangedEventFilter;
    MaxLtvChanged(newMaxLtv?: null): MaxLtvChangedEventFilter;

    "MinAmountChanged(uint256)"(
      newMinAmount?: null
    ): MinAmountChangedEventFilter;
    MinAmountChanged(newMinAmount?: null): MinAmountChangedEventFilter;

    "OracleChanged(address)"(newOracle?: null): OracleChangedEventFilter;
    OracleChanged(newOracle?: null): OracleChangedEventFilter;

    "Paused(address,uint8)"(account?: null, action?: null): PausedEventFilter;
    Paused(account?: null, action?: null): PausedEventFilter;

    "PausedForceAll(address)"(account?: null): PausedForceAllEventFilter;
    PausedForceAll(account?: null): PausedForceAllEventFilter;

    "Payback(address,address,uint256,uint256)"(
      sender?: string | null,
      owner?: string | null,
      debt?: null,
      shares?: null
    ): PaybackEventFilter;
    Payback(
      sender?: string | null,
      owner?: string | null,
      debt?: null,
      shares?: null
    ): PaybackEventFilter;

    "ProvidersChanged(address[])"(
      newProviders?: null
    ): ProvidersChangedEventFilter;
    ProvidersChanged(newProviders?: null): ProvidersChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address,uint8)"(
      account?: null,
      action?: null
    ): UnpausedEventFilter;
    Unpaused(account?: null, action?: null): UnpausedEventFilter;

    "UnpausedForceAll(address)"(account?: null): UnpausedForceAllEventFilter;
    UnpausedForceAll(account?: null): UnpausedForceAllEventFilter;

    "VaultRebalance(uint256,uint256,address,address)"(
      assets?: null,
      debt?: null,
      from?: string | null,
      to?: string | null
    ): VaultRebalanceEventFilter;
    VaultRebalance(
      assets?: null,
      debt?: null,
      from?: string | null,
      to?: string | null
    ): VaultRebalanceEventFilter;

    "Withdraw(address,address,address,uint256,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;

    "WithdrawApproval(address,address,address,uint256)"(
      owner?: string | null,
      operator?: null,
      receiver?: null,
      amount?: null
    ): WithdrawApprovalEventFilter;
    WithdrawApproval(
      owner?: string | null,
      operator?: null,
      receiver?: null,
      amount?: null
    ): WithdrawApprovalEventFilter;
  };

  estimateGas: {
    DEFAULT_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FULL_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    HARVESTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATION_CLOSE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    activeProvider(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAsset(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfDebt(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfDebtShares(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(uint256,address,address,uint256)"(
      debt: BigNumberish,
      receiver: string,
      owner: string,
      maxDebtShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256,address,address)"(
      debt: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowAllowance(
      owner: string,
      operator: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chief(overrides?: CallOverrides): Promise<BigNumber>;

    convertDebtToShares(
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToDebt(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtAsset(overrides?: CallOverrides): Promise<BigNumber>;

    debtDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    debtSharesSupply(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseBorrowAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseWithdrawAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,address,uint256)"(
      assets: BigNumberish,
      receiver: string,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    getHealthFactor(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationFactor(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviders(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseBorrowAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseWithdrawAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liqRatio(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      owner: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxBorrow(borrower: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxLtv(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "mint(uint256,address,uint256)"(
      shares: BigNumberish,
      receiver: string,
      maxAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(action: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "payback(uint256,address,uint256)"(
      debt: BigNumberish,
      owner: string,
      minDebtShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "payback(uint256,address)"(
      debt: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permitBorrow(
      owner: string,
      receiver: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permitWithdraw(
      owner: string,
      receiver: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      fee: BigNumberish,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(uint256,address,address,uint256)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      minAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setActiveProvider(
      activeProvider_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiqRatio(
      liqRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLtv(
      maxLtv_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProviders(
      providers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,address,address,uint256)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      maxShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllowance(
      owner: string,
      operator: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FULL_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HARVESTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION_PENALTY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAsset(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfDebt(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfDebtShares(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,address,address,uint256)"(
      debt: BigNumberish,
      receiver: string,
      owner: string,
      maxDebtShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,address,address)"(
      debt: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowAllowance(
      owner: string,
      operator: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chief(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertDebtToShares(
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToDebt(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtSharesSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseBorrowAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseWithdrawAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address,uint256)"(
      assets: BigNumberish,
      receiver: string,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHealthFactor(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationFactor(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseBorrowAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseWithdrawAllowance(
      operator: string,
      receiver: string,
      byAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liqRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      owner: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxBorrow(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLtv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mint(uint256,address,uint256)"(
      shares: BigNumberish,
      receiver: string,
      maxAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(
      action: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "payback(uint256,address,uint256)"(
      debt: BigNumberish,
      owner: string,
      minDebtShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "payback(uint256,address)"(
      debt: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permitBorrow(
      owner: string,
      receiver: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permitWithdraw(
      owner: string,
      receiver: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(
      assets: BigNumberish,
      debt: BigNumberish,
      from: string,
      to: string,
      fee: BigNumberish,
      setToAsActiveProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256,address,address,uint256)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      minAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setActiveProvider(
      activeProvider_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiqRatio(
      liqRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLtv(
      maxLtv_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProviders(
      providers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseForceAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,address,uint256)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      maxShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllowance(
      owner: string,
      operator: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

export interface BorrowingVaultMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  DEFAULT_LIQUIDATION_CLOSE_FACTOR(overrides?: CallOverrides): Call<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Call<string>;

  FULL_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Call<BigNumber>;

  HARVESTER_ROLE(overrides?: CallOverrides): Call<string>;

  HOUSE_KEEPER_ROLE(overrides?: CallOverrides): Call<string>;

  LIQUIDATION_PENALTY(overrides?: CallOverrides): Call<BigNumber>;

  LIQUIDATOR_ROLE(overrides?: CallOverrides): Call<string>;

  MAX_LIQUIDATION_CLOSE_FACTOR(overrides?: CallOverrides): Call<BigNumber>;

  PAUSER_ROLE(overrides?: CallOverrides): Call<string>;

  REBALANCER_ROLE(overrides?: CallOverrides): Call<string>;

  UNPAUSER_ROLE(overrides?: CallOverrides): Call<string>;

  VERSION(overrides?: CallOverrides): Call<string>;

  activeProvider(overrides?: CallOverrides): Call<string>;

  allowance(
    owner: string,
    receiver: string,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  asset(overrides?: CallOverrides): Call<string>;

  balanceOf(account: string, overrides?: CallOverrides): Call<BigNumber>;

  balanceOfAsset(owner: string, overrides?: CallOverrides): Call<BigNumber>;

  balanceOfDebt(owner: string, overrides?: CallOverrides): Call<BigNumber>;

  balanceOfDebtShares(
    owner: string,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  borrowAllowance(
    owner: string,
    operator: string,
    receiver: string,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  chief(overrides?: CallOverrides): Call<string>;

  convertDebtToShares(
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  convertToAssets(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  convertToDebt(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  convertToShares(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  debtAsset(overrides?: CallOverrides): Call<string>;

  debtDecimals(overrides?: CallOverrides): Call<number>;

  debtSharesSupply(overrides?: CallOverrides): Call<BigNumber>;

  decimals(overrides?: CallOverrides): Call<number>;

  depositCap(overrides?: CallOverrides): Call<BigNumber>;

  getHealthFactor(owner: string, overrides?: CallOverrides): Call<BigNumber>;

  getLiquidationFactor(
    owner: string,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  getProviders(overrides?: CallOverrides): Call<string[]>;

  liqRatio(overrides?: CallOverrides): Call<BigNumber>;

  maxBorrow(borrower: string, overrides?: CallOverrides): Call<BigNumber>;

  maxDeposit(arg0: string, overrides?: CallOverrides): Call<BigNumber>;

  maxLtv(overrides?: CallOverrides): Call<BigNumber>;

  maxMint(arg0: string, overrides?: CallOverrides): Call<BigNumber>;

  maxRedeem(owner: string, overrides?: CallOverrides): Call<BigNumber>;

  maxWithdraw(owner: string, overrides?: CallOverrides): Call<BigNumber>;

  minAmount(overrides?: CallOverrides): Call<BigNumber>;

  name(overrides?: CallOverrides): Call<string>;

  nonces(owner: string, overrides?: CallOverrides): Call<BigNumber>;

  oracle(overrides?: CallOverrides): Call<string>;

  paused(action: BigNumberish, overrides?: CallOverrides): Call<boolean>;

  previewDeposit(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  previewMint(shares: BigNumberish, overrides?: CallOverrides): Call<BigNumber>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Call<BigNumber>;

  symbol(overrides?: CallOverrides): Call<string>;

  totalAssets(overrides?: CallOverrides): Call<BigNumber>;

  totalDebt(overrides?: CallOverrides): Call<BigNumber>;

  totalSupply(overrides?: CallOverrides): Call<BigNumber>;

  withdrawAllowance(
    owner: string,
    operator: string,
    receiver: string,
    overrides?: CallOverrides
  ): Call<BigNumber>;
}
