/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { Fragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { Call } from "@hovoh/ethcall";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface VaultDeployerInterface extends utils.Interface {
  functions: {
    "chief()": FunctionFragment;
    "configAddress(bytes32)": FunctionFragment;
    "getVaults(address,uint256,uint256)": FunctionFragment;
    "vaultsByAsset(address,uint256)": FunctionFragment;
    "vaultsCount(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chief"
      | "configAddress"
      | "getVaults"
      | "vaultsByAsset"
      | "vaultsCount"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chief", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaults",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultsByAsset",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaultsCount", values: [string]): string;

  decodeFunctionResult(functionFragment: "chief", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultsByAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultsCount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VaultDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chief(overrides?: CallOverrides): Promise<[string]>;

    configAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVaults(
      asset: string,
      startIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { vaults: string[] }>;

    vaultsByAsset(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vaultsCount(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  chief(overrides?: CallOverrides): Promise<string>;

  configAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  getVaults(
    asset: string,
    startIndex: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  vaultsByAsset(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  vaultsCount(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    chief(overrides?: CallOverrides): Promise<string>;

    configAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    getVaults(
      asset: string,
      startIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    vaultsByAsset(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    vaultsCount(asset: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    chief(overrides?: CallOverrides): Promise<BigNumber>;

    configAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaults(
      asset: string,
      startIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultsByAsset(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultsCount(asset: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chief(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaults(
      asset: string,
      startIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultsByAsset(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultsCount(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

export interface VaultDeployerMulticall {
  address: string;
  abi: Fragment[];
  functions: FunctionFragment[];

  chief(overrides?: CallOverrides): Call<string>;

  configAddress(arg0: BytesLike, overrides?: CallOverrides): Call<string>;

  getVaults(
    asset: string,
    startIndex: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Call<string[]>;

  vaultsByAsset(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Call<string>;

  vaultsCount(asset: string, overrides?: CallOverrides): Call<BigNumber>;
}
