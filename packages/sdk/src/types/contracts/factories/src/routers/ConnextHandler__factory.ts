/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";
import type {
  ConnextHandler,
  ConnextHandlerInterface,
  ConnextHandlerMulticall,
} from "../../../src/routers/ConnextHandler";
import { Contract as MulticallContract } from "@hovoh/ethcall";
const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "connextRouter_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ConnextHandler__callerNotConnextRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "ConnextHandler__executeFailed_emptyTxn",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "nonce",
        type: "uint128",
      },
    ],
    name: "ConnextHandler__executeFailed_tranferAlreadyExecuted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "enum IRouter.Action[]",
        name: "oldActions",
        type: "uint8[]",
      },
      {
        indexed: false,
        internalType: "enum IRouter.Action[]",
        name: "newActions",
        type: "uint8[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "oldArgs",
        type: "bytes[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "newArgs",
        type: "bytes[]",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "nonce",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "FailedTxnExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "originSender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "originDomain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "enum IRouter.Action[]",
        name: "actions",
        type: "uint8[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "args",
        type: "bytes[]",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "nonce",
        type: "uint128",
      },
    ],
    name: "FailedTxnRecorded",
    type: "event",
  },
  {
    inputs: [],
    name: "connextRouter",
    outputs: [
      {
        internalType: "contract ConnextRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "nonce",
        type: "uint128",
      },
      {
        internalType: "enum IRouter.Action[]",
        name: "actions",
        type: "uint8[]",
      },
      {
        internalType: "bytes[]",
        name: "args",
        type: "bytes[]",
      },
    ],
    name: "executeFailedWithUpdatedArgs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "nonce",
        type: "uint128",
      },
    ],
    name: "getFailedTxn",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "transferId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "address",
            name: "originSender",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "originDomain",
            type: "uint32",
          },
          {
            internalType: "enum IRouter.Action[]",
            name: "actions",
            type: "uint8[]",
          },
          {
            internalType: "bytes[]",
            name: "args",
            type: "bytes[]",
          },
          {
            internalType: "uint128",
            name: "nonce",
            type: "uint128",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct ConnextHandler.FailedTxn",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
    ],
    name: "getFailedTxnNextNonce",
    outputs: [
      {
        internalType: "uint128",
        name: "next",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "nonce",
        type: "uint128",
      },
    ],
    name: "isTransferIdRecorded",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "originSender",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "originDomain",
        type: "uint32",
      },
      {
        internalType: "enum IRouter.Action[]",
        name: "actions",
        type: "uint8[]",
      },
      {
        internalType: "bytes[]",
        name: "args",
        type: "bytes[]",
      },
    ],
    name: "recordFailed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];
export class ConnextHandler__factory {
  static readonly abi = _abi;
  static createInterface(): ConnextHandlerInterface {
    return new utils.Interface(_abi) as ConnextHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnextHandler {
    return new Contract(address, _abi, signerOrProvider) as ConnextHandler;
  }
  static multicall(address: string): ConnextHandlerMulticall {
    return new MulticallContract(
      address,
      _abi
    ) as unknown as ConnextHandlerMulticall;
  }
}
