/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";
import type {
  RebalancerManager,
  RebalancerManagerInterface,
  RebalancerManagerMulticall,
} from "../../src/RebalancerManager";
import { Contract as MulticallContract } from "@hovoh/ethcall";
const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "chief_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "RebalancerManager__allowExecutor_noAllowChange",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalancerManager__checkAssetsAmount_invalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalancerManager__checkDebtAmount_invalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalancerManager__completeRebalance_invalidEntryPoint",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalancerManager__getFlashloan_flashloanFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalancerManager__getFlashloan_notEmptyEntryPoint",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalancerManager__rebalanceVault_notValidExecutor",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalancerManager__rebalanceVault_notValidFlasher",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalancerManager__zeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
    ],
    name: "SystemAccessControl__hasRole_missingRole",
    type: "error",
  },
  {
    inputs: [],
    name: "SystemAccessControl__onlyHouseKeeper_notHouseKeeper",
    type: "error",
  },
  {
    inputs: [],
    name: "SystemAccessControl__onlyTimelock_callerIsNotTimelock",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "AllowExecutor",
    type: "event",
  },
  {
    inputs: [],
    name: "HARVESTER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "HOUSE_KEEPER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LIQUIDATOR_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REBALANCER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNPAUSER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "allowExecutor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowedExecutor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "chief",
    outputs: [
      {
        internalType: "contract IChief",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "assets",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "contract ILendingProvider",
        name: "from",
        type: "address",
      },
      {
        internalType: "contract ILendingProvider",
        name: "to",
        type: "address",
      },
      {
        internalType: "contract IFlasher",
        name: "flasher",
        type: "address",
      },
      {
        internalType: "bool",
        name: "setToAsActiveProvider",
        type: "bool",
      },
    ],
    name: "completeRebalance",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "assets",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "contract ILendingProvider",
        name: "from",
        type: "address",
      },
      {
        internalType: "contract ILendingProvider",
        name: "to",
        type: "address",
      },
      {
        internalType: "contract IFlasher",
        name: "flasher",
        type: "address",
      },
      {
        internalType: "bool",
        name: "setToAsActiveProvider",
        type: "bool",
      },
    ],
    name: "rebalanceVault",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];
export class RebalancerManager__factory {
  static readonly abi = _abi;
  static createInterface(): RebalancerManagerInterface {
    return new utils.Interface(_abi) as RebalancerManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RebalancerManager {
    return new Contract(address, _abi, signerOrProvider) as RebalancerManager;
  }
  static multicall(address: string): RebalancerManagerMulticall {
    return new MulticallContract(
      address,
      _abi
    ) as unknown as RebalancerManagerMulticall;
  }
}
