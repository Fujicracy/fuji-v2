/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";
import type {
  IExecutor,
  IExecutorInterface,
  IExecutorMulticall,
} from "../../../../../src/interfaces/connext/IConnext.sol/IExecutor";
import { Contract as MulticallContract } from "@hovoh/ethcall";
const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "transferId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "recovery",
            type: "address",
          },
          {
            internalType: "address",
            name: "assetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "originSender",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "originDomain",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct ExecutorArgs",
        name: "_args",
        type: "tuple",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "returnData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];
export class IExecutor__factory {
  static readonly abi = _abi;
  static createInterface(): IExecutorInterface {
    return new utils.Interface(_abi) as IExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IExecutor {
    return new Contract(address, _abi, signerOrProvider) as IExecutor;
  }
  static multicall(address: string): IExecutorMulticall {
    return new MulticallContract(
      address,
      _abi
    ) as unknown as IExecutorMulticall;
  }
}
