/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";
import type {
  IConnextHandler,
  IConnextHandlerInterface,
  IConnextHandlerMulticall,
} from "../../../../../src/interfaces/connext/IConnext.sol/IConnextHandler";
import { Contract as MulticallContract } from "@hovoh/ethcall";
const _abi = [
  {
    inputs: [],
    name: "domain",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "executor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes",
              },
              {
                internalType: "uint32",
                name: "originDomain",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "destinationDomain",
                type: "uint32",
              },
              {
                internalType: "address",
                name: "agent",
                type: "address",
              },
              {
                internalType: "address",
                name: "recovery",
                type: "address",
              },
              {
                internalType: "bool",
                name: "forceSlow",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "receiveLocal",
                type: "bool",
              },
              {
                internalType: "address",
                name: "callback",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "callbackFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "relayerFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "destinationMinOut",
                type: "uint256",
              },
            ],
            internalType: "struct CallParams",
            name: "params",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "transactingAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "transactingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "originMinOut",
            type: "uint256",
          },
        ],
        internalType: "struct XCallArgs",
        name: "_args",
        type: "tuple",
      },
    ],
    name: "xcall",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];
export class IConnextHandler__factory {
  static readonly abi = _abi;
  static createInterface(): IConnextHandlerInterface {
    return new utils.Interface(_abi) as IConnextHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IConnextHandler {
    return new Contract(address, _abi, signerOrProvider) as IConnextHandler;
  }
  static multicall(address: string): IConnextHandlerMulticall {
    return new MulticallContract(
      address,
      _abi
    ) as unknown as IConnextHandlerMulticall;
  }
}
