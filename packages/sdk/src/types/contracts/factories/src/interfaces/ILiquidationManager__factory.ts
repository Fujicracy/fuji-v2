/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";
import type {
  ILiquidationManager,
  ILiquidationManagerInterface,
  ILiquidationManagerMulticall,
} from "../../../src/interfaces/ILiquidationManager";
import { Contract as MulticallContract } from "@hovoh/ethcall";
const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "AllowExecutor",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "allowExecutor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "debtToCover",
        type: "uint256",
      },
      {
        internalType: "contract IFlasher",
        name: "flasher",
        type: "address",
      },
      {
        internalType: "contract ISwapper",
        name: "swapper",
        type: "address",
      },
    ],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];
export class ILiquidationManager__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidationManagerInterface {
    return new utils.Interface(_abi) as ILiquidationManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILiquidationManager {
    return new Contract(address, _abi, signerOrProvider) as ILiquidationManager;
  }
  static multicall(address: string): ILiquidationManagerMulticall {
    return new MulticallContract(
      address,
      _abi
    ) as unknown as ILiquidationManagerMulticall;
  }
}
