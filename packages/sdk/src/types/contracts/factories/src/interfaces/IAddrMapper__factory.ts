/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";
import type {
  IAddrMapper,
  IAddrMapperInterface,
  IAddrMapperMulticall,
} from "../../../src/interfaces/IAddrMapper";
import { Contract as MulticallContract } from "@hovoh/ethcall";
const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "keyAddress",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "mappedAddress",
        type: "address",
      },
    ],
    name: "MappingChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "providerName",
        type: "string",
      },
      {
        internalType: "address",
        name: "keyAddr",
        type: "address",
      },
    ],
    name: "getAddressMapping",
    outputs: [
      {
        internalType: "address",
        name: "returnedAddr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "providerName",
        type: "string",
      },
      {
        internalType: "address",
        name: "keyAddr1",
        type: "address",
      },
      {
        internalType: "address",
        name: "keyAddr2",
        type: "address",
      },
    ],
    name: "getAddressNestedMapping",
    outputs: [
      {
        internalType: "address",
        name: "returnedAddr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "providerName",
        type: "string",
      },
      {
        internalType: "address",
        name: "keyAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "returnedAddr",
        type: "address",
      },
    ],
    name: "setMapping",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "providerName",
        type: "string",
      },
      {
        internalType: "address",
        name: "keyAddr1",
        type: "address",
      },
      {
        internalType: "address",
        name: "keyAddr2",
        type: "address",
      },
      {
        internalType: "address",
        name: "returnedAddr",
        type: "address",
      },
    ],
    name: "setNestedMapping",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];
export class IAddrMapper__factory {
  static readonly abi = _abi;
  static createInterface(): IAddrMapperInterface {
    return new utils.Interface(_abi) as IAddrMapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAddrMapper {
    return new Contract(address, _abi, signerOrProvider) as IAddrMapper;
  }
  static multicall(address: string): IAddrMapperMulticall {
    return new MulticallContract(
      address,
      _abi
    ) as unknown as IAddrMapperMulticall;
  }
}
