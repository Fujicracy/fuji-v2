/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";
import type {
  BaseRouter,
  BaseRouterInterface,
  BaseRouterMulticall,
} from "../../../src/abstracts/BaseRouter";
import { Contract as MulticallContract } from "@hovoh/ethcall";
const _abi = [
  {
    inputs: [],
    name: "BaseRouter__allowCaller_noAllowChange",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__allowCaller_zeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_flashloanInvalidRequestor",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_insufficientETH",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_insufficientFlashloanBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_noBalanceChange",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_notAllowedFlasher",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_notAllowedSwapper",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_notBeneficiary",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_paramsMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__bundleInternal_swapNotFirstAction",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__checkVaultInput_notActiveVault",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__fallback_notAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__handlePermit_notPermitAction",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__receive_senderNotWETH",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseRouter__safeTransferETH_transferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
    ],
    name: "SystemAccessControl__hasRole_missingRole",
    type: "error",
  },
  {
    inputs: [],
    name: "SystemAccessControl__onlyHouseKeeper_notHouseKeeper",
    type: "error",
  },
  {
    inputs: [],
    name: "SystemAccessControl__onlyTimelock_callerIsNotTimelock",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "AllowCaller",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "HARVESTER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "HOUSE_KEEPER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LIQUIDATOR_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REBALANCER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNPAUSER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "contract IWETH9",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "allowCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "chief",
    outputs: [
      {
        internalType: "contract IChief",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isAllowedCaller",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "sweepETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IRouter.Action[]",
        name: "actions",
        type: "uint8[]",
      },
      {
        internalType: "bytes[]",
        name: "args",
        type: "bytes[]",
      },
    ],
    name: "xBundle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];
export class BaseRouter__factory {
  static readonly abi = _abi;
  static createInterface(): BaseRouterInterface {
    return new utils.Interface(_abi) as BaseRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseRouter {
    return new Contract(address, _abi, signerOrProvider) as BaseRouter;
  }
  static multicall(address: string): BaseRouterMulticall {
    return new MulticallContract(
      address,
      _abi
    ) as unknown as BaseRouterMulticall;
  }
}
