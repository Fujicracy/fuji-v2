/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";
import type {
  ChainlinkComputedFeed,
  ChainlinkComputedFeedInterface,
  ChainlinkComputedFeedMulticall,
} from "../../../src/helpers/ChainlinkComputedFeed";
import { Contract as MulticallContract } from "@hovoh/ethcall";
const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "description_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "feedAsset_",
        type: "address",
      },
      {
        internalType: "address",
        name: "feedInterAsset_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowedTimeout_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ChainlinkComputedFeed_fetchFeedAssetFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainlinkComputedFeed_fetchFeedInterFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainlinkComputedFeed_invalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainlinkComputedFeed_lessThanOrZeroAnswer",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainlinkComputedFeed_noRoundId",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainlinkComputedFeed_noValidUpdateAt",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainlinkComputedFeed_staleFeed",
    type: "error",
  },
  {
    inputs: [],
    name: "allowedTimeout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feedAsset",
    outputs: [
      {
        internalType: "contract IAggregatorV3",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feedInterAsset",
    outputs: [
      {
        internalType: "contract IAggregatorV3",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];
export class ChainlinkComputedFeed__factory {
  static readonly abi = _abi;
  static createInterface(): ChainlinkComputedFeedInterface {
    return new utils.Interface(_abi) as ChainlinkComputedFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkComputedFeed {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ChainlinkComputedFeed;
  }
  static multicall(address: string): ChainlinkComputedFeedMulticall {
    return new MulticallContract(
      address,
      _abi
    ) as unknown as ChainlinkComputedFeedMulticall;
  }
}
