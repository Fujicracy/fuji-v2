[
  "error AssetFacet__addAssetId_alreadyAdded()",
  "error AssetFacet__addAssetId_noWrapperExists()",
  "error AssetFacet__removeAssetId_notAdded()",
  "error AssetFacet__setTokenRegistry_invalidTokenRegistry()",
  "error AssetFacet__setWrapper_invalidWrapper()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "event AssetAdded(bytes32,uint32,address,address,address)",
  "event AssetRemoved(bytes32,address)",
  "event StableSwapAdded(bytes32,uint32,address,address)",
  "event TokenRegistryUpdated(address,address,address)",
  "event WrapperUpdated(address,address,address)",
  "function addStableSwapPool(tuple(uint32,bytes32),address)",
  "function adoptedToCanonical(address) view returns (tuple(uint32,bytes32))",
  "function adoptedToLocalPools(bytes32) view returns (address)",
  "function approvedAssets(bytes32) view returns (bool)",
  "function canonicalToAdopted(bytes32) view returns (address)",
  "function removeAssetId(bytes32,address)",
  "function setTokenRegistry(address)",
  "function setWrapper(address)",
  "function setupAsset(tuple(uint32,bytes32),address,address)",
  "function tokenRegistry() view returns (address)",
  "function wrapper() view returns (address)",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
  "error AssetLogic__handleIncomingAsset_ethWithErcTransfer()",
  "error AssetLogic__handleIncomingAsset_notAmount()",
  "error AssetLogic__transferAssetFromContract_notNative()",
  "error AssetLogic__transferAssetToContract_feeOnTransferNotSupported()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error BridgeFacet__bumpTransfer_valueIsZero()",
  "error BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn()",
  "error BridgeFacet__execute_alreadyExecuted()",
  "error BridgeFacet__execute_alreadyReconciled()",
  "error BridgeFacet__execute_invalidRouterSignature()",
  "error BridgeFacet__execute_maxRoutersExceeded()",
  "error BridgeFacet__execute_notApprovedForPortals()",
  "error BridgeFacet__execute_notReconciled()",
  "error BridgeFacet__execute_notSupportedRouter()",
  "error BridgeFacet__execute_unapprovedSender()",
  "error BridgeFacet__execute_wrongDomain()",
  "error BridgeFacet__forceReceiveLocal_invalidSender()",
  "error BridgeFacet__handleExecuteTransaction_invalidSponsoredAmount()",
  "error BridgeFacet__setExecutor_invalidExecutor()",
  "error BridgeFacet__setPromiseRouter_invalidPromiseRouter()",
  "error BridgeFacet__setSponsorVault_invalidSponsorVault()",
  "error BridgeFacet__xcall_callbackNotAContract()",
  "error BridgeFacet__xcall_emptyTo()",
  "error BridgeFacet__xcall_nonZeroCallbackFeeForCallback()",
  "error BridgeFacet__xcall_notSupportedAsset()",
  "error BridgeFacet__xcall_wrongDomain()",
  "event AavePortalMintUnbacked(bytes32 indexed,address indexed,address,uint256)",
  "event Executed(bytes32 indexed,address indexed,tuple(tuple(address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,address[],bytes[],uint256,uint256,address),address,uint256,address)",
  "event ExecutorUpdated(address,address,address)",
  "event ForcedReceiveLocal(bytes32 indexed,bytes32 indexed,uint32,uint256)",
  "event PromiseRouterUpdated(address,address,address)",
  "event SponsorVaultUpdated(address,address,address)",
  "event TransferRelayerFeesUpdated(bytes32 indexed,uint256,address)",
  "event XCalled(bytes32 indexed,tuple(tuple(address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,uint256),tuple(address,uint256,uint256,address),uint256,bytes,address)",
  "function AAVE_REFERRAL_CODE() view returns (uint16)",
  "function bumpTransfer(bytes32) payable",
  "function domain() view returns (uint32)",
  "function execute(tuple(tuple(address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,address[],bytes[],uint256,uint256,address)) returns (bytes32)",
  "function executor() view returns (address)",
  "function forceReceiveLocal(tuple(address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),uint256,uint256,bytes32,uint32,address)",
  "function nonce() view returns (uint256)",
  "function promiseRouter() view returns (address)",
  "function reconciledTransfers(bytes32) view returns (bool)",
  "function relayerFees(bytes32) view returns (uint256)",
  "function routedTransfers(bytes32) view returns (address[])",
  "function setExecutor(address)",
  "function setPromiseRouter(address)",
  "function setSponsorVault(address)",
  "function sponsorVault() view returns (address)",
  "function xcall(tuple(tuple(address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,uint256)) payable returns (bytes32)",
  "event DiamondCut(tuple(address,uint8,bytes4[])[],address,bytes)",
  "function diamondCut(tuple(address,uint8,bytes4[])[],address,bytes)",
  "function proposeDiamondCut(tuple(address,uint8,bytes4[])[],address,bytes)",
  "function rescindDiamondCut(tuple(address,uint8,bytes4[])[],address,bytes)",
  "function facetAddress(bytes4) view returns (address)",
  "function facetAddresses() view returns (address[])",
  "function facetFunctionSelectors(address) view returns (bytes4[])",
  "function facets() view returns (tuple(address,bytes4[])[])",
  "function supportsInterface(bytes4) view returns (bool)",
  "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error NomadFacet__reconcile_alreadyReconciled()",
  "error NomadFacet__reconcile_invalidAction()",
  "error NomadFacet__reconcile_noPortalRouter()",
  "event AavePortalRepayment(bytes32 indexed,address,uint256,uint256)",
  "event AavePortalRepaymentDebt(bytes32 indexed,address,uint256,uint256)",
  "event Reconciled(bytes32 indexed,uint32 indexed,address[],address,uint256,address)",
  "function enrollRemoteRouter(uint32,bytes32)",
  "function handle(uint32,uint32,bytes32,bytes)",
  "function remotes(uint32) view returns (bytes32)",
  "function setXAppConnectionManager(address)",
  "function xAppConnectionManager() view returns (address)",
  "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
  "error AssetLogic__handleIncomingAsset_ethWithErcTransfer()",
  "error AssetLogic__handleIncomingAsset_notAmount()",
  "error AssetLogic__transferAssetToContract_feeOnTransferNotSupported()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error PortalFacet__repayAavePortalFor_notSupportedAsset()",
  "error PortalFacet__repayAavePortalFor_zeroAmount()",
  "error PortalFacet__repayAavePortal_insufficientFunds()",
  "error PortalFacet__repayAavePortal_swapFailed()",
  "error PortalFacet__setAavePortalFee_invalidFee()",
  "event AavePortalRouterRepayment(address indexed,address,uint256,uint256)",
  "function aavePool() view returns (address)",
  "function aavePortalFee() view returns (uint256)",
  "function getAavePortalDebt(bytes32) view returns (uint256)",
  "function getAavePortalFeeDebt(bytes32) view returns (uint256)",
  "function repayAavePortal(address,uint256,uint256,uint256,bytes32)",
  "function repayAavePortalFor(address,uint256,uint256,bytes32) payable",
  "function setAavePool(address)",
  "function setAavePortalFee(uint256)",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error ProposedOwnableFacet__acceptProposedOwner_delayNotElapsed()",
  "error ProposedOwnableFacet__acceptProposedOwner_noOwnershipChange()",
  "error ProposedOwnableFacet__proposeAssetOwnershipRenunciation_noOwnershipChange()",
  "error ProposedOwnableFacet__proposeNewOwner_invalidProposal()",
  "error ProposedOwnableFacet__proposeNewOwner_noOwnershipChange()",
  "error ProposedOwnableFacet__proposeRouterOwnershipRenunciation_noOwnershipChange()",
  "error ProposedOwnableFacet__renounceAssetOwnership_delayNotElapsed()",
  "error ProposedOwnableFacet__renounceAssetOwnership_noOwnershipChange()",
  "error ProposedOwnableFacet__renounceAssetOwnership_noProposal()",
  "error ProposedOwnableFacet__renounceOwnership_delayNotElapsed()",
  "error ProposedOwnableFacet__renounceOwnership_invalidProposal()",
  "error ProposedOwnableFacet__renounceOwnership_noProposal()",
  "error ProposedOwnableFacet__renounceRouterOwnership_delayNotElapsed()",
  "error ProposedOwnableFacet__renounceRouterOwnership_noOwnershipChange()",
  "error ProposedOwnableFacet__renounceRouterOwnership_noProposal()",
  "event AssetOwnershipRenounced(bool)",
  "event AssetOwnershipRenunciationProposed(uint256)",
  "event OwnershipProposed(address indexed)",
  "event OwnershipTransferred(address indexed,address indexed)",
  "event Paused()",
  "event RouterOwnershipRenounced(bool)",
  "event RouterOwnershipRenunciationProposed(uint256)",
  "event Unpaused()",
  "function acceptProposedOwner()",
  "function assetOwnershipRenounced() view returns (bool)",
  "function assetOwnershipTimestamp() view returns (uint256)",
  "function delay() pure returns (uint256)",
  "function owner() view returns (address)",
  "function pause()",
  "function proposeAssetOwnershipRenunciation()",
  "function proposeNewOwner(address)",
  "function proposeRouterOwnershipRenunciation()",
  "function proposed() view returns (address)",
  "function proposedTimestamp() view returns (uint256)",
  "function renounceAssetOwnership()",
  "function renounceOwnership()",
  "function renounceRouterOwnership()",
  "function renounced() view returns (bool)",
  "function routerOwnershipRenounced() view returns (bool)",
  "function routerOwnershipTimestamp() view returns (uint256)",
  "function unpause()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error RelayerFacet__addRelayer_alreadyApproved()",
  "error RelayerFacet__initiateClaim_emptyClaim()",
  "error RelayerFacet__initiateClaim_notRelayer(bytes32)",
  "error RelayerFacet__onlyRelayerFeeRouter_notRelayerFeeRouter()",
  "error RelayerFacet__removeRelayer_notApproved()",
  "error RelayerFacet__setRelayerFeeRouter_invalidRelayerFeeRouter()",
  "event Claimed(address indexed,uint256,bytes32[])",
  "event InitiatedClaim(uint32 indexed,address indexed,address,bytes32[])",
  "event RelayerAdded(address,address)",
  "event RelayerFeeRouterUpdated(address,address,address)",
  "event RelayerRemoved(address,address)",
  "function addRelayer(address)",
  "function approvedRelayers(address) view returns (bool)",
  "function claim(address,bytes32[])",
  "function initiateClaim(uint32,address,bytes32[])",
  "function relayerFeeRouter() view returns (address)",
  "function removeRelayer(address)",
  "function setRelayerFeeRouter(address)",
  "function transferRelayer(bytes32) view returns (address)",
  "error AssetLogic__handleIncomingAsset_ethWithErcTransfer()",
  "error AssetLogic__handleIncomingAsset_notAmount()",
  "error AssetLogic__transferAssetFromContract_notNative()",
  "error AssetLogic__transferAssetToContract_feeOnTransferNotSupported()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error RoutersFacet__acceptProposedRouterOwner_notElapsed()",
  "error RoutersFacet__addLiquidityForRouter_amountIsZero()",
  "error RoutersFacet__addLiquidityForRouter_badAsset()",
  "error RoutersFacet__addLiquidityForRouter_badRouter()",
  "error RoutersFacet__addLiquidityForRouter_routerEmpty()",
  "error RoutersFacet__approveRouterForPortal_alreadyApproved()",
  "error RoutersFacet__approveRouterForPortal_notAdded()",
  "error RoutersFacet__onlyProposedRouterOwner_notProposedRouterOwner()",
  "error RoutersFacet__onlyProposedRouterOwner_notRouterOwner()",
  "error RoutersFacet__onlyRouterOwner_notRouterOwner()",
  "error RoutersFacet__proposeRouterOwner_badRouter()",
  "error RoutersFacet__proposeRouterOwner_notNewOwner()",
  "error RoutersFacet__removeRouterLiquidityFor_notOwner()",
  "error RoutersFacet__removeRouterLiquidity_amountIsZero()",
  "error RoutersFacet__removeRouterLiquidity_insufficientFunds()",
  "error RoutersFacet__removeRouterLiquidity_recipientEmpty()",
  "error RoutersFacet__removeRouter_notAdded()",
  "error RoutersFacet__removeRouter_routerEmpty()",
  "error RoutersFacet__setLiquidityFeeNumerator_tooLarge()",
  "error RoutersFacet__setLiquidityFeeNumerator_tooSmall()",
  "error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
  "error RoutersFacet__setRouterRecipient_notNewRecipient()",
  "error RoutersFacet__setupRouter_alreadyAdded()",
  "error RoutersFacet__setupRouter_routerEmpty()",
  "error RoutersFacet__unapproveRouterForPortal_notApproved()",
  "event LiquidityFeeNumeratorUpdated(uint256,address)",
  "event MaxRoutersPerTransferUpdated(uint256,address)",
  "event RouterAdded(address indexed,address)",
  "event RouterApprovedForPortal(address,address)",
  "event RouterLiquidityAdded(address indexed,address,bytes32,uint256,address)",
  "event RouterLiquidityRemoved(address indexed,address,address,uint256,address)",
  "event RouterOwnerAccepted(address indexed,address indexed,address indexed)",
  "event RouterOwnerProposed(address indexed,address indexed,address indexed)",
  "event RouterRecipientSet(address indexed,address indexed,address indexed)",
  "event RouterRemoved(address indexed,address)",
  "event RouterUnapprovedForPortal(address,address)",
  "function LIQUIDITY_FEE_DENOMINATOR() view returns (uint256)",
  "function LIQUIDITY_FEE_NUMERATOR() view returns (uint256)",
  "function acceptProposedRouterOwner(address)",
  "function addRouterLiquidity(uint256,address) payable",
  "function addRouterLiquidityFor(uint256,address,address) payable",
  "function approveRouterForPortal(address)",
  "function getProposedRouterOwner(address) view returns (address)",
  "function getProposedRouterOwnerTimestamp(address) view returns (uint256)",
  "function getRouterApproval(address) view returns (bool)",
  "function getRouterApprovalForPortal(address) view returns (bool)",
  "function getRouterOwner(address) view returns (address)",
  "function getRouterRecipient(address) view returns (address)",
  "function maxRoutersPerTransfer() view returns (uint256)",
  "function proposeRouterOwner(address,address)",
  "function removeRouter(address)",
  "function removeRouterLiquidity(uint256,address,address)",
  "function removeRouterLiquidityFor(uint256,address,address,address)",
  "function routerBalances(address,address) view returns (uint256)",
  "function setLiquidityFeeNumerator(uint256)",
  "function setMaxRoutersPerTransfer(uint256)",
  "function setRouterRecipient(address,address)",
  "function setupRouter(address,address,address)",
  "function unapproveRouterForPortal(address)",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error StableSwapFacet__deadlineCheck_deadlineNotMet()",
  "error StableSwapFacet__getSwapTokenBalance_indexOutOfRange()",
  "error StableSwapFacet__getSwapTokenIndex_notExist()",
  "error StableSwapFacet__getSwapToken_outOfRange()",
  "function addSwapLiquidity(bytes32,uint256[],uint256,uint256) returns (uint256)",
  "function calculateRemoveSwapLiquidity(bytes32,uint256) view returns (uint256[])",
  "function calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8) view returns (uint256)",
  "function calculateSwap(bytes32,uint8,uint8,uint256) view returns (uint256)",
  "function calculateSwapTokenAmount(bytes32,uint256[],bool) view returns (uint256)",
  "function getSwapA(bytes32) view returns (uint256)",
  "function getSwapAPrecise(bytes32) view returns (uint256)",
  "function getSwapAdminBalance(bytes32,uint256) view returns (uint256)",
  "function getSwapLPToken(bytes32) view returns (address)",
  "function getSwapStorage(bytes32) view returns (tuple(uint256,uint256,uint256,uint256,uint256,uint256,address,address[],uint256[],uint256[],uint256[]))",
  "function getSwapToken(bytes32,uint8) view returns (address)",
  "function getSwapTokenBalance(bytes32,uint8) view returns (uint256)",
  "function getSwapTokenIndex(bytes32,address) view returns (uint8)",
  "function getSwapVirtualPrice(bytes32) view returns (uint256)",
  "function removeSwapLiquidity(bytes32,uint256,uint256[],uint256) returns (uint256[])",
  "function removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256) returns (uint256)",
  "function removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256) returns (uint256)",
  "function swap(bytes32,uint8,uint8,uint256,uint256,uint256) returns (uint256)",
  "function swapExact(bytes32,uint256,address,address,uint256,uint256) payable returns (uint256)",
  "function swapExactOut(bytes32,uint256,address,address,uint256,uint256) payable returns (uint256)"
]
