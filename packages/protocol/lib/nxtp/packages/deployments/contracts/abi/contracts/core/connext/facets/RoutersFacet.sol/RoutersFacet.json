[
  "error AssetLogic__handleIncomingAsset_ethWithErcTransfer()",
  "error AssetLogic__handleIncomingAsset_notAmount()",
  "error AssetLogic__transferAssetFromContract_notNative()",
  "error AssetLogic__transferAssetToContract_feeOnTransferNotSupported()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__onlyRemoteRouter_notRemoteRouter()",
  "error BaseConnextFacet__onlyReplica_notReplica()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error RoutersFacet__acceptProposedRouterOwner_notElapsed()",
  "error RoutersFacet__addLiquidityForRouter_amountIsZero()",
  "error RoutersFacet__addLiquidityForRouter_badAsset()",
  "error RoutersFacet__addLiquidityForRouter_badRouter()",
  "error RoutersFacet__addLiquidityForRouter_routerEmpty()",
  "error RoutersFacet__approveRouterForPortal_alreadyApproved()",
  "error RoutersFacet__approveRouterForPortal_notAdded()",
  "error RoutersFacet__onlyProposedRouterOwner_notProposedRouterOwner()",
  "error RoutersFacet__onlyProposedRouterOwner_notRouterOwner()",
  "error RoutersFacet__onlyRouterOwner_notRouterOwner()",
  "error RoutersFacet__proposeRouterOwner_badRouter()",
  "error RoutersFacet__proposeRouterOwner_notNewOwner()",
  "error RoutersFacet__removeRouterLiquidityFor_notOwner()",
  "error RoutersFacet__removeRouterLiquidity_amountIsZero()",
  "error RoutersFacet__removeRouterLiquidity_insufficientFunds()",
  "error RoutersFacet__removeRouterLiquidity_recipientEmpty()",
  "error RoutersFacet__removeRouter_notAdded()",
  "error RoutersFacet__removeRouter_routerEmpty()",
  "error RoutersFacet__setLiquidityFeeNumerator_tooLarge()",
  "error RoutersFacet__setLiquidityFeeNumerator_tooSmall()",
  "error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
  "error RoutersFacet__setRouterRecipient_notNewRecipient()",
  "error RoutersFacet__setupRouter_alreadyAdded()",
  "error RoutersFacet__setupRouter_routerEmpty()",
  "error RoutersFacet__unapproveRouterForPortal_notApproved()",
  "event LiquidityFeeNumeratorUpdated(uint256,address)",
  "event MaxRoutersPerTransferUpdated(uint256,address)",
  "event RouterAdded(address indexed,address)",
  "event RouterApprovedForPortal(address,address)",
  "event RouterLiquidityAdded(address indexed,address,bytes32,uint256,address)",
  "event RouterLiquidityRemoved(address indexed,address,address,uint256,address)",
  "event RouterOwnerAccepted(address indexed,address indexed,address indexed)",
  "event RouterOwnerProposed(address indexed,address indexed,address indexed)",
  "event RouterRecipientSet(address indexed,address indexed,address indexed)",
  "event RouterRemoved(address indexed,address)",
  "event RouterUnapprovedForPortal(address,address)",
  "function LIQUIDITY_FEE_DENOMINATOR() view returns (uint256)",
  "function LIQUIDITY_FEE_NUMERATOR() view returns (uint256)",
  "function acceptProposedRouterOwner(address)",
  "function addRouterLiquidity(uint256,address) payable",
  "function addRouterLiquidityFor(uint256,address,address) payable",
  "function approveRouterForPortal(address)",
  "function getProposedRouterOwner(address) view returns (address)",
  "function getProposedRouterOwnerTimestamp(address) view returns (uint256)",
  "function getRouterApproval(address) view returns (bool)",
  "function getRouterApprovalForPortal(address) view returns (bool)",
  "function getRouterOwner(address) view returns (address)",
  "function getRouterRecipient(address) view returns (address)",
  "function maxRoutersPerTransfer() view returns (uint256)",
  "function proposeRouterOwner(address,address)",
  "function removeRouter(address)",
  "function removeRouterLiquidity(uint256,address,address)",
  "function removeRouterLiquidityFor(uint256,address,address,address)",
  "function routerBalances(address,address) view returns (uint256)",
  "function setLiquidityFeeNumerator(uint256)",
  "function setMaxRoutersPerTransfer(uint256)",
  "function setRouterRecipient(address,address)",
  "function setupRouter(address,address,address)",
  "function unapproveRouterForPortal(address)"
]
