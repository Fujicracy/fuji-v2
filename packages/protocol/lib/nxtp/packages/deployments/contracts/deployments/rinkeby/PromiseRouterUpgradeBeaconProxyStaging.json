{
  "address": "0xdcfDfF5044B19c41212b33B502F95C407b133106",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_upgradeBeacon",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_initializationCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5bb06d2c1a786e09336b9014ec8d17b667daf5cf110f7cb40e40e5e75866b50e",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0xdcfDfF5044B19c41212b33B502F95C407b133106",
    "transactionIndex": 1,
    "gasUsed": "235072",
    "logsBloom": "0x
    "blockHash": "0x7be19485dc5ac16429079345f6fa14aba096dfdc39695bba0c7cd316afe6ef54",
    "transactionHash": "0x5bb06d2c1a786e09336b9014ec8d17b667daf5cf110f7cb40e40e5e75866b50e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10974431,
        "transactionHash": "0x5bb06d2c1a786e09336b9014ec8d17b667daf5cf110f7cb40e40e5e75866b50e",
        "address": "0xdcfDfF5044B19c41212b33B502F95C407b133106",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054baa998771639628ffc0206c3b916c466b79c89"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7be19485dc5ac16429079345f6fa14aba096dfdc39695bba0c7cd316afe6ef54"
      }
    ],
    "blockNumber": 10974431,
    "cumulativeGasUsed": "433659",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6164801DC5e415ec9cEa6eefADf65bb5a232F7eD",
    "0xc4d66de8000000000000000000000000db378579c2af11817eea21474a39f95b5b9dfd7e"
  ],
  "numDeployments": 1,
  "solcInputHash": "28a1680f8c9b96a6e25163563e7c895e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgradeBeacon\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initializationCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This implementation combines the gas savings of keeping the UpgradeBeacon address outside of contract storage found in 0age's implementation: https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol With the added safety checks that the UpgradeBeacon and implementation are contracts at time of deployment found in OpenZeppelin's implementation: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_initializationCalldata\":\"Calldata supplied when calling the initialization function\",\"_upgradeBeacon\":\"Address of the Upgrade Beacon to be stored immutably in the contract\"}}},\"title\":\"UpgradeBeaconProxy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Validate that the Upgrade Beacon is a contract, then set its address immutably within this contract. Validate that the implementation is also a contract, Then call the initialization function defined at the implementation. The deployment will revert and pass along the revert reason if the initialization function reverts.\"}},\"notice\":\"Proxy contract which delegates all logic, including initialization, to an implementation contract. The implementation contract is stored within an Upgrade Beacon contract; the implementation contract can be changed by performing an upgrade on the Upgrade Beacon contract. The Upgrade Beacon contract for this Proxy is immutably specified at deployment.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nomad-core/contracts/upgrade/UpgradeBeaconProxy.sol\":\"UpgradeBeaconProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/nomad-core/contracts/upgrade/UpgradeBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n// ============ External Imports ============\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title UpgradeBeaconProxy\\n * @notice\\n * Proxy contract which delegates all logic, including initialization,\\n * to an implementation contract.\\n * The implementation contract is stored within an Upgrade Beacon contract;\\n * the implementation contract can be changed by performing an upgrade on the Upgrade Beacon contract.\\n * The Upgrade Beacon contract for this Proxy is immutably specified at deployment.\\n * @dev This implementation combines the gas savings of keeping the UpgradeBeacon address outside of contract storage\\n * found in 0age's implementation:\\n * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol\\n * With the added safety checks that the UpgradeBeacon and implementation are contracts at time of deployment\\n * found in OpenZeppelin's implementation:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol\\n */\\ncontract UpgradeBeaconProxy {\\n  // ============ Immutables ============\\n\\n  // Upgrade Beacon address is immutable (therefore not kept in contract storage)\\n  address private immutable upgradeBeacon;\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Validate that the Upgrade Beacon is a contract, then set its\\n   * address immutably within this contract.\\n   * Validate that the implementation is also a contract,\\n   * Then call the initialization function defined at the implementation.\\n   * The deployment will revert and pass along the\\n   * revert reason if the initialization function reverts.\\n   * @param _upgradeBeacon Address of the Upgrade Beacon to be stored immutably in the contract\\n   * @param _initializationCalldata Calldata supplied when calling the initialization function\\n   */\\n  constructor(address _upgradeBeacon, bytes memory _initializationCalldata) payable {\\n    // Validate the Upgrade Beacon is a contract\\n    require(Address.isContract(_upgradeBeacon), \\\"beacon !contract\\\");\\n    // set the Upgrade Beacon\\n    upgradeBeacon = _upgradeBeacon;\\n    // Validate the implementation is a contract\\n    address _implementation = _getImplementation(_upgradeBeacon);\\n    require(Address.isContract(_implementation), \\\"beacon implementation !contract\\\");\\n    // Call the initialization function on the implementation\\n    if (_initializationCalldata.length > 0) {\\n      _initialize(_implementation, _initializationCalldata);\\n    }\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Forwards all calls with data to _fallback()\\n   * No public functions are declared on the contract, so all calls hit fallback\\n   */\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @notice Forwards all calls with no data to _fallback()\\n   */\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  // ============ Private Functions ============\\n\\n  /**\\n   * @notice Call the initialization function on the implementation\\n   * Used at deployment to initialize the proxy\\n   * based on the logic for initialization defined at the implementation\\n   * @param _implementation - Contract to which the initalization is delegated\\n   * @param _initializationCalldata - Calldata supplied when calling the initialization function\\n   */\\n  function _initialize(address _implementation, bytes memory _initializationCalldata) private {\\n    // Delegatecall into the implementation, supplying initialization calldata.\\n    (bool _ok, ) = _implementation.delegatecall(_initializationCalldata);\\n    // Revert and include revert data if delegatecall to implementation reverts.\\n    if (!_ok) {\\n      assembly {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Delegates function calls to the implementation contract returned by the Upgrade Beacon\\n   */\\n  function _fallback() private {\\n    _delegate(_getImplementation());\\n  }\\n\\n  /**\\n   * @notice Delegate function execution to the implementation contract\\n   * @dev This is a low level function that doesn't return to its internal\\n   * call site. It will return whatever is returned by the implementation to the\\n   * external caller, reverting and returning the revert data if implementation\\n   * reverts.\\n   * @param _implementation - Address to which the function execution is delegated\\n   */\\n  function _delegate(address _implementation) private {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n      // Delegatecall to the implementation, supplying calldata and gas.\\n      // Out and outsize are set to zero - instead, use the return buffer.\\n      let result := delegatecall(gas(), _implementation, 0, calldatasize(), 0, 0)\\n      // Copy the returned data from the return buffer.\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      // Delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Call the Upgrade Beacon to get the current implementation contract address\\n   * @return _implementation Address of the current implementation.\\n   */\\n  function _getImplementation() private view returns (address _implementation) {\\n    _implementation = _getImplementation(upgradeBeacon);\\n  }\\n\\n  /**\\n   * @notice Call the Upgrade Beacon to get the current implementation contract address\\n   * @dev _upgradeBeacon is passed as a parameter so that\\n   * we can also use this function in the constructor,\\n   * where we can't access immutable variables.\\n   * @param _upgradeBeacon Address of the UpgradeBeacon storing the current implementation\\n   * @return _implementation Address of the current implementation.\\n   */\\n  function _getImplementation(address _upgradeBeacon) private view returns (address _implementation) {\\n    // Get the current implementation address from the upgrade beacon.\\n    (bool _ok, bytes memory _returnData) = _upgradeBeacon.staticcall(\\\"\\\");\\n    // Revert and pass along revert message if call to upgrade beacon reverts.\\n    require(_ok, string(_returnData));\\n    // Set the implementation to the address returned from the upgrade beacon.\\n    _implementation = abi.decode(_returnData, (address));\\n  }\\n}\\n\",\"keccak256\":\"0xde9b4a822c28cfc6b2f68ca580a5485049b1c444497c9645ca2a74fad42f4db5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526040516105b13803806105b18339810160408190526100229161027e565b6100358261010b60201b6100291760201c565b6100795760405162461bcd60e51b815260206004820152601060248201526f18995858dbdb880858dbdb9d1c9858dd60821b60448201526064015b60405180910390fd5b6001600160a01b03821660805260006100918361011a565b90506100a68161010b60201b6100291760201c565b6100f25760405162461bcd60e51b815260206004820152601f60248201527f626561636f6e20696d706c656d656e746174696f6e2021636f6e7472616374006044820152606401610070565b8151156101035761010381836101ae565b5050506103b3565b6001600160a01b03163b151590565b6000806000836001600160a01b0316604051600060405180830381855afa9150503d8060008114610167576040519150601f19603f3d011682016040523d82523d6000602084013e61016c565b606091505b50915091508181906101915760405162461bcd60e51b81526004016100709190610340565b50808060200190518101906101a69190610373565b949350505050565b6000826001600160a01b0316826040516101c89190610397565b600060405180830381855af49150503d8060008114610203576040519150601f19603f3d011682016040523d82523d6000602084013e610208565b606091505b505090508061021b573d6000803e3d6000fd5b505050565b6001600160a01b038116811461023557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610269578181015183820152602001610251565b83811115610278576000848401525b50505050565b6000806040838503121561029157600080fd5b825161029c81610220565b60208401519092506001600160401b03808211156102b957600080fd5b818501915085601f8301126102cd57600080fd5b8151818111156102df576102df610238565b604051601f8201601f19908116603f0116810190838211818310171561030757610307610238565b8160405282815288602084870101111561032057600080fd5b61033183602083016020880161024e565b80955050505050509250929050565b602081526000825180602084015261035f81604085016020870161024e565b601f01601f19169190910160400192915050565b60006020828403121561038557600080fd5b815161039081610220565b9392505050565b600082516103a981846020870161024e565b9190910192915050565b6080516101e46103cd6000396000603f01526101e46000f3fe60806040523661001357610011610017565b005b6100115b610027610022610038565b610068565b565b6001600160a01b03163b151590565b60006100637f000000000000000000000000000000000000000000000000000000000000000061008c565b905090565b3660008037600080366000845af43d6000803e808015610087573d6000f35b3d6000fd5b6000806000836001600160a01b0316604051600060405180830381855afa9150503d80600081146100d9576040519150601f19603f3d011682016040523d82523d6000602084013e6100de565b606091505b509150915081819061010c5760405162461bcd60e51b81526004016101039190610129565b60405180910390fd5b5080806020019051810190610121919061017e565b949350505050565b600060208083528351808285015260005b818110156101565785810183015185820160400152820161013a565b81811115610168576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561019057600080fd5b81516001600160a01b03811681146101a757600080fd5b939250505056fea2646970667358221220ac321230b8b46513ac2b8ee083283b98bc4efaf0676dd2d50130e2ef328fc9eb64736f6c634300080f0033",
  "deployedBytecode": "0x60806040523661001357610011610017565b005b6100115b610027610022610038565b610068565b565b6001600160a01b03163b151590565b60006100637f000000000000000000000000000000000000000000000000000000000000000061008c565b905090565b3660008037600080366000845af43d6000803e808015610087573d6000f35b3d6000fd5b6000806000836001600160a01b0316604051600060405180830381855afa9150503d80600081146100d9576040519150601f19603f3d011682016040523d82523d6000602084013e6100de565b606091505b509150915081819061010c5760405162461bcd60e51b81526004016101039190610129565b60405180910390fd5b5080806020019051810190610121919061017e565b949350505050565b600060208083528351808285015260005b818110156101565785810183015185820160400152820161013a565b81811115610168576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561019057600080fd5b81516001600160a01b03811681146101a757600080fd5b939250505056fea2646970667358221220ac321230b8b46513ac2b8ee083283b98bc4efaf0676dd2d50130e2ef328fc9eb64736f6c634300080f0033",
  "devdoc": {
    "details": "This implementation combines the gas savings of keeping the UpgradeBeacon address outside of contract storage found in 0age's implementation: https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol With the added safety checks that the UpgradeBeacon and implementation are contracts at time of deployment found in OpenZeppelin's implementation: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_initializationCalldata": "Calldata supplied when calling the initialization function",
          "_upgradeBeacon": "Address of the Upgrade Beacon to be stored immutably in the contract"
        }
      }
    },
    "title": "UpgradeBeaconProxy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Validate that the Upgrade Beacon is a contract, then set its address immutably within this contract. Validate that the implementation is also a contract, Then call the initialization function defined at the implementation. The deployment will revert and pass along the revert reason if the initialization function reverts."
      }
    },
    "notice": "Proxy contract which delegates all logic, including initialization, to an implementation contract. The implementation contract is stored within an Upgrade Beacon contract; the implementation contract can be changed by performing an upgrade on the Upgrade Beacon contract. The Upgrade Beacon contract for this Proxy is immutably specified at deployment.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}