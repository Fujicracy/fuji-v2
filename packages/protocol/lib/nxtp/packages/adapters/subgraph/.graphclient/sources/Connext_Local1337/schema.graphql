schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type local1337_Asset {
  id: ID!
  local: local1337_Bytes!
  adoptedAsset: local1337_Bytes!
  canonicalId: local1337_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type local1337_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1337_Router!
  asset: local1337_Asset!
}

input local1337_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: local1337_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1337_Asset_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input local1337_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: local1337_Bytes
  local_not: local1337_Bytes
  local_in: [local1337_Bytes!]
  local_not_in: [local1337_Bytes!]
  local_contains: local1337_Bytes
  local_not_contains: local1337_Bytes
  adoptedAsset: local1337_Bytes
  adoptedAsset_not: local1337_Bytes
  adoptedAsset_in: [local1337_Bytes!]
  adoptedAsset_not_in: [local1337_Bytes!]
  adoptedAsset_contains: local1337_Bytes
  adoptedAsset_not_contains: local1337_Bytes
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar local1337_BigDecimal

scalar BigInt

input local1337_BlockChangedFilter {
  number_gte: Int!
}

input local1337_Block_height {
  hash: local1337_Bytes
  number: Int
  number_gte: Int
}

scalar local1337_Bytes

type local1337_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  to: local1337_Bytes
  callData: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1337_Bytes
  recovery: local1337_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1337_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: local1337_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1337_Router_orderBy, orderDirection: local1337_OrderDirection, where: local1337_Router_filter): [local1337_Router!]
  originSender: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAmount: BigInt
  localAsset: local1337_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: local1337_Bytes
  executedTransactionHash: local1337_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input local1337_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: local1337_Bytes
  agent_not: local1337_Bytes
  agent_in: [local1337_Bytes!]
  agent_not_in: [local1337_Bytes!]
  agent_contains: local1337_Bytes
  agent_not_contains: local1337_Bytes
  recovery: local1337_Bytes
  recovery_not: local1337_Bytes
  recovery_in: [local1337_Bytes!]
  recovery_not_in: [local1337_Bytes!]
  recovery_contains: local1337_Bytes
  recovery_not_contains: local1337_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: local1337_Bytes
  callback_not: local1337_Bytes
  callback_in: [local1337_Bytes!]
  callback_not_in: [local1337_Bytes!]
  callback_contains: local1337_Bytes
  callback_not_contains: local1337_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: local1337_Router_filter
  originSender: local1337_Bytes
  originSender_not: local1337_Bytes
  originSender_in: [local1337_Bytes!]
  originSender_not_in: [local1337_Bytes!]
  originSender_contains: local1337_Bytes
  originSender_not_contains: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAsset_not: local1337_Bytes
  transactingAsset_in: [local1337_Bytes!]
  transactingAsset_not_in: [local1337_Bytes!]
  transactingAsset_contains: local1337_Bytes
  transactingAsset_not_contains: local1337_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: local1337_Bytes
  localAsset_not: local1337_Bytes
  localAsset_in: [local1337_Bytes!]
  localAsset_not_in: [local1337_Bytes!]
  localAsset_contains: local1337_Bytes
  localAsset_not_contains: local1337_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: local1337_Bytes
  executedCaller_not: local1337_Bytes
  executedCaller_in: [local1337_Bytes!]
  executedCaller_not_in: [local1337_Bytes!]
  executedCaller_contains: local1337_Bytes
  executedCaller_not_contains: local1337_Bytes
  executedTransactionHash: local1337_Bytes
  executedTransactionHash_not: local1337_Bytes
  executedTransactionHash_in: [local1337_Bytes!]
  executedTransactionHash_not_in: [local1337_Bytes!]
  executedTransactionHash_contains: local1337_Bytes
  executedTransactionHash_not_contains: local1337_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: local1337_Bytes
  reconciledCaller_not: local1337_Bytes
  reconciledCaller_in: [local1337_Bytes!]
  reconciledCaller_not_in: [local1337_Bytes!]
  reconciledCaller_contains: local1337_Bytes
  reconciledCaller_not_contains: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
  reconciledTransactionHash_not: local1337_Bytes
  reconciledTransactionHash_in: [local1337_Bytes!]
  reconciledTransactionHash_not_in: [local1337_Bytes!]
  reconciledTransactionHash_contains: local1337_Bytes
  reconciledTransactionHash_not_contains: local1337_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum local1337_OrderDirection {
  asc
  desc
}

type local1337_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  to: local1337_Bytes
  callData: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1337_Bytes
  recovery: local1337_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1337_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: local1337_TransferStatus
  message: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAmount: BigInt
  bridgedAsset: local1337_Bytes
  bridgedAmount: BigInt
  caller: local1337_Bytes
  transactionHash: local1337_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input local1337_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: local1337_Bytes
  agent_not: local1337_Bytes
  agent_in: [local1337_Bytes!]
  agent_not_in: [local1337_Bytes!]
  agent_contains: local1337_Bytes
  agent_not_contains: local1337_Bytes
  recovery: local1337_Bytes
  recovery_not: local1337_Bytes
  recovery_in: [local1337_Bytes!]
  recovery_not_in: [local1337_Bytes!]
  recovery_contains: local1337_Bytes
  recovery_not_contains: local1337_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: local1337_Bytes
  callback_not: local1337_Bytes
  callback_in: [local1337_Bytes!]
  callback_not_in: [local1337_Bytes!]
  callback_contains: local1337_Bytes
  callback_not_contains: local1337_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
  message: local1337_Bytes
  message_not: local1337_Bytes
  message_in: [local1337_Bytes!]
  message_not_in: [local1337_Bytes!]
  message_contains: local1337_Bytes
  message_not_contains: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAsset_not: local1337_Bytes
  transactingAsset_in: [local1337_Bytes!]
  transactingAsset_not_in: [local1337_Bytes!]
  transactingAsset_contains: local1337_Bytes
  transactingAsset_not_contains: local1337_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: local1337_Bytes
  bridgedAsset_not: local1337_Bytes
  bridgedAsset_in: [local1337_Bytes!]
  bridgedAsset_not_in: [local1337_Bytes!]
  bridgedAsset_contains: local1337_Bytes
  bridgedAsset_not_contains: local1337_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  transactionHash: local1337_Bytes
  transactionHash_not: local1337_Bytes
  transactionHash_in: [local1337_Bytes!]
  transactionHash_not_in: [local1337_Bytes!]
  transactionHash_contains: local1337_Bytes
  transactionHash_not_contains: local1337_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Query {
  local1337_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Asset!]!
  local1337_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_AssetBalance!]!
  local1337_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Router!]!
  local1337_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Setting!]!
  local1337_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Relayer!]!
  local1337_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwap!]!
  local1337_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SponsorVault
  local1337_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SponsorVault_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SponsorVault!]!
  local1337_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
}

type local1337_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1337_Bytes
}

input local1337_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: local1337_Bytes
  relayer_not: local1337_Bytes
  relayer_in: [local1337_Bytes!]
  relayer_not_in: [local1337_Bytes!]
  relayer_contains: local1337_Bytes
  relayer_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Relayer_orderBy {
  id
  isActive
  relayer
}

type local1337_Router {
  id: ID!
  isActive: Boolean!
  owner: local1337_Bytes
  recipient: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1337_AssetBalance_orderBy, orderDirection: local1337_OrderDirection, where: local1337_AssetBalance_filter): [local1337_AssetBalance!]!
}

input local1337_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: local1337_Bytes
  owner_not: local1337_Bytes
  owner_in: [local1337_Bytes!]
  owner_not_in: [local1337_Bytes!]
  owner_contains: local1337_Bytes
  owner_not_contains: local1337_Bytes
  recipient: local1337_Bytes
  recipient_not: local1337_Bytes
  recipient_in: [local1337_Bytes!]
  recipient_not_in: [local1337_Bytes!]
  recipient_contains: local1337_Bytes
  recipient_not_contains: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedOwner_not: local1337_Bytes
  proposedOwner_in: [local1337_Bytes!]
  proposedOwner_not_in: [local1337_Bytes!]
  proposedOwner_contains: local1337_Bytes
  proposedOwner_not_contains: local1337_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: local1337_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type local1337_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1337_Bytes!
}

input local1337_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type local1337_SponsorVault {
  id: ID!
  sponsorVault: local1337_Bytes!
}

input local1337_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: local1337_Bytes
  sponsorVault_not: local1337_Bytes
  sponsorVault_in: [local1337_Bytes!]
  sponsorVault_not_in: [local1337_Bytes!]
  sponsorVault_contains: local1337_Bytes
  sponsorVault_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_SponsorVault_orderBy {
  id
  sponsorVault
}

type local1337_StableSwap {
  id: ID!
  canonicalId: local1337_Bytes!
  domain: BigInt
  swapPool: local1337_Bytes!
}

input local1337_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: local1337_Bytes
  swapPool_not: local1337_Bytes
  swapPool_in: [local1337_Bytes!]
  swapPool_not_in: [local1337_Bytes!]
  swapPool_contains: local1337_Bytes
  swapPool_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

type Subscription {
  local1337_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Asset!]!
  local1337_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_AssetBalance!]!
  local1337_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Router!]!
  local1337_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Setting!]!
  local1337_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Relayer!]!
  local1337_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwap!]!
  local1337_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SponsorVault
  local1337_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SponsorVault_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SponsorVault!]!
  local1337_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
}

enum local1337_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type local1337__Block_ {
  """The hash of the block"""
  hash: local1337_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type local1337__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: local1337__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}